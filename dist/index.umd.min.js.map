{"version":3,"sources":["webpack://dompp/webpack/universalModuleDefinition","webpack://dompp/./node_modules/data-tree/index.js","webpack://dompp/./node_modules/data-tree/src/traverser.js","webpack://dompp/./node_modules/data-tree/src/tree-node.js","webpack://dompp/./node_modules/data-tree/src/tree.js","webpack://dompp/webpack/bootstrap","webpack://dompp/webpack/runtime/define property getters","webpack://dompp/webpack/runtime/hasOwnProperty shorthand","webpack://dompp/webpack/runtime/make namespace object","webpack://dompp/./modules/util.mjs","webpack://dompp/./modules/designator.mjs","webpack://dompp/./modules/value.mjs","webpack://dompp/./modules/function.mjs","webpack://dompp/./modules/atomic-function.mjs","webpack://dompp/./modules/booleans.mjs","webpack://dompp/./modules/tracer.mjs","webpack://dompp/./modules/numbers.mjs","webpack://dompp/./modules/enumerate.mjs","webpack://dompp/./modules/composed-function.mjs","webpack://dompp/./modules/verdict.mjs","webpack://dompp/./modules/quantifier.mjs","webpack://dompp/./modules/web-element.mjs","webpack://dompp/./modules/serialization.mjs","webpack://dompp/./index.mjs"],"names":["root","factory","exports","module","define","amd","self","Tree","dataTree","create","Traverser","tree","Error","this","_tree","prototype","searchDFS","criteria","foundNode","recur","node","matchCriteria","_childNodes","some","_rootNode","searchBFS","queue","length","current","splice","forEach","_child","push","traverseDFS","callback","traverseBFS","TreeNode","data","_parentNode","_data","_depth","parentNode","childNodes","arguments","depth","siblings","thiss","filter","distanceToRoot","distance","getAncestry","ancestors","export","exportRecur","exported","children","_currentNode","_traverser","rootNode","currentNode","traverser","isEmpty","pruneAllNodes","trimBranchFrom","insert","remove","trim","indexOf","insertTo","insertToNode","newNode","distanceBetween","fromNode","toNode","findCommonParent","fromNodeAncestors","toNodeAncestors","common","ancestor","compress","parent","hasCompressedNodes","import","childProperty","importRecur","recurData","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","r","Symbol","toStringTag","value","same_object","o1","o2","equals","set_contains","s","x","i","isHtmlElement","constructor","name","getPrototypeOf","Designator","head","tail","Nothing","super","toString","Unknown","All","CompoundDesignator","instance","designators","elements","add","j","size","new_d","Value","getValue","query","type","ConstantValue","NaryValue","values","positions","q","leaves","ConstantDesignator","n","getObjectNode","addChild","AbstractFunction","members","ConstantFunction","lift","evaluate","setTo","variable","getArity","params","serializedParam","contents","keys","deserialize","toJson","serializedMembers","member","isPrototypeOf","ReturnValue","InputArgument","index","getIndex","set","AtomicFunction","arity","compute","args","AtomicFunctionReturnValue","referenceFunction","outputValue","inputValues","getAndNode","sub_leaves","sub_root","f_root","getChildren","Identity","BooleanConnective","false_values","false_positions","true_values","true_positions","getBooleanValue","NaryDisjunctiveVerdict","getOrNode","NaryConjunctiveVerdict","BooleanAnd","BooleanOr","BooleanNot","Tracer","nodes","Map","tracerContext","simplify","setSimplify","b","DesignatedObject","dob","m","k","map_contains","map_get","on","ObjectNode","v","map_put","AndNode","OrNode","getUnknownNode","UnknownNode","getSubTracer","con","getTree","tn","visited","getDesignatedObject","getObject","getDesignator","TraceabilityNode","id","TN_ID_COUNTER","getId","indent","designatedObject","designator","object","context","getContext","cdo","sameContext","Explainer","tracer","IsEqualTo","Addition","sum","Subtraction","sub","Multiplication","zero_values","zero_positions","result","getZeroValue","parseFloat","Division","div","GreaterThan","JSON","stringify","LesserThan","GreaterOrEqual","LesserOrEqual","Enumerate","list","Array","isArray","val_list","out_list","EnumeratedValue","input_list","inputList","NthItem","n_it","appliesTo","ComposedFunction","operator","operands","op","startsWith","substring","Argument","NamedArgument","setName","cf","getArguments","f","ComposedFunctionValue","return_value","returnValue","new_sub_leaves","sub_leaf","des","isSet","NamedArgumentValue","getName","FunctionNamedArgument","Function","ArgumentValue","TestDriver","conditions","returnedValues","evaluateAll","getResult","verdicts","Verdict","TestResult","TestCondition","function","e","c","condition","getCondition","getWitness","explain","pick","test","getVerdicts","Quantifier","domain","phi","true_verdicts","false_verdicts","o_dom","ret_val","o_b","verdict","getQuantifierValue","QuantifierVerdict","QuantifierDisjunctiveVerdict","sub_factory","QuantifierConjunctiveVerdict","UniversalQuantifier","ExistentialQuantifier","WebElementFunction","val","ElementAttributeValue","getOwnerWindow","element","ownerDocument","defaultView","parentWindow","getElementComputedStyle","getComputedStyle","ElementAttribute","input","CssPropertyFunction","returnType","getPropertyValue","parseInt","CssRecursivePropertyFunction","defaultValue","getRecursive","parentElement","DimensionWidth","offsetWidth","DimensionHeight","offsetHeight","PageOffsetTop","getOffsetTop","offsetParent","offsetTop","PageOffsetLeft","getOffsetLeft","offsetLeft","ClientOffsetTop","getBoundingClientRect","top","ClientOffsetLeft","left","FontSize","FontWeight","FontFamily","Color","Opacity","BackgroundColor","MarginTop","MarginBottom","MarginLeft","MarginRight","PaddingTop","PaddingBottom","PaddingLeft","PaddingRight","BorderWidth","BorderStyle","BorderColor","BorderRadius","Display","Visibility","Position","Float","BackgroundImage","Zindex","Path","path","PathValue","p","FindBySelector","selector","elm_list","querySelectorAll","getPathTo","pv","tagName","ix","sibling","nodeType","Serialization","DomPPClasses","serialize","evaluateDom","getVerdict","getTreeFromWitness","witnesses","part","lastPartType","subject","elementAttribute"],"mappings":"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","file":"index.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dompp\"] = factory();\n\telse\n\t\troot[\"dompp\"] = factory();\n})(self, function() {\nreturn ","var Tree = require('./src/tree');\nmodule.exports = dataTree = (function(){\n  return {\n    create: function(){\n      return new Tree();\n    }\n  };\n}());\n","\nmodule.exports = (function(){\n\n  // Flag bad practises\n  'use strict';\n\n  // ------------------------------------\n  // Basic Setup\n  // ------------------------------------\n\n  /**\n   * @class Traverser\n   * @constructor\n   * @classdesc Represents a traverser which searches/traverses the tree in BFS and DFS fashion.\n   * @param tree - {@link Tree} that has to be traversed or search.\n   */\n  function Traverser(tree){\n\n    if(!tree)\n    throw new Error('Could not find a tree that is to be traversed');\n\n    /**\n     * Represents the {@link Tree} which has to be traversed.\n     *\n     * @property _tree\n     * @type {object}\n     * @default \"null\"\n     */\n    this._tree = tree;\n\n  }\n\n  // ------------------------------------\n  // Methods\n  // ------------------------------------\n\n  /**\n   * Searches a tree in DFS fashion. Requires a search criteria to be provided.\n   *\n   * @method searchDFS\n   * @memberof Traverser\n   * @instance\n   * @param {function} criteria - MUST BE a callback function that specifies the search criteria.\n   * Criteria callback here receives {@link TreeNode#_data} in parameter and MUST return boolean\n   * indicating whether that data satisfies your criteria.\n   * @return {object} - first {@link TreeNode} in tree that matches the given criteria.\n   * @example\n   * // Search DFS\n   * var node = tree.traverser().searchDFS(function(data){\n   *  return data.key === '#greenapple';\n   * });\n   */\n  Traverser.prototype.searchDFS = function(criteria){\n\n    // Hold the node when found\n    var foundNode = null;\n\n    // Find node recursively\n    (function recur(node){\n      if(node.matchCriteria(criteria)){\n        foundNode = node;\n        return foundNode;\n      } else {\n        node._childNodes.some(recur);\n      }\n    }(this._tree._rootNode));\n\n    return foundNode;\n  };\n\n  /**\n   * Searches a tree in BFS fashion. Requires a search criteria to be provided.\n   *\n   * @method searchBFS\n   * @memberof Traverser\n   * @instance\n   * @param {function} criteria - MUST BE a callback function that specifies the search criteria.\n   * Criteria callback here receives {@link TreeNode#_data} in parameter and MUST return boolean\n   * indicating whether that data satisfies your criteria.\n   * @return {object} - first {@link TreeNode} in tree that matches the given criteria.\n   * @example\n   * // Search BFS\n   * var node = tree.traverser().searchBFS(function(data){\n   *  return data.key === '#greenapple';\n   * });\n   */\n  Traverser.prototype.searchBFS = function(criteria){\n\n    // Hold the node when found\n    var foundNode = null;\n\n    // Find nodes recursively\n    (function expand(queue){\n      while(queue.length){\n        var current = queue.splice(0, 1)[0];\n        if(current.matchCriteria(criteria)){\n          foundNode = current;\n          return;\n        }\n        current._childNodes.forEach(function(_child){\n          queue.push(_child);\n        });\n      }\n    }([this._tree._rootNode]));\n\n\n    return foundNode;\n\n  };\n\n  /**\n   * Traverses an entire tree in DFS fashion.\n   *\n   * @method traverseDFS\n   * @memberof Traverser\n   * @instance\n   * @param {function} callback - Gets triggered when @{link TreeNode} is explored. Explored node is passed as parameter to callback.\n   * @example\n   * // Traverse DFS\n   * tree.traverser().traverseDFS(function(node){\n   *  console.log(node.data);\n   * });\n   */\n  Traverser.prototype.traverseDFS = function(callback){\n    (function recur(node){\n      callback(node);\n      node._childNodes.forEach(recur);\n    }(this._tree._rootNode));\n  };\n\n  /**\n   * Traverses an entire tree in BFS fashion.\n   *\n   * @method traverseBFS\n   * @memberof Traverser\n   * @instance\n   * @param {function} callback - Gets triggered when node is explored. Explored node is passed as parameter to callback.\n   * @example\n   * // Traverse BFS\n   * tree.traverser().traverseBFS(function(node){\n   *  console.log(node.data);\n   * });\n   */\n  Traverser.prototype.traverseBFS = function(callback){\n    (function expand(queue){\n      while(queue.length){\n        var current = queue.splice(0, 1)[0];\n        callback(current);\n        current._childNodes.forEach(function(_child){\n          queue.push(_child);\n        });\n      }\n    }([this._tree._rootNode]));\n  };\n\n  // ------------------------------------\n  // Export\n  // ------------------------------------\n\n  return Traverser;\n\n}());\n","\nmodule.exports = (function(){\n\n  // Flag bad practises\n  'use strict';\n\n  // ------------------------------------\n  // Basic Setup\n  // ------------------------------------\n\n  /**\n   * @class TreeNode\n   * @classdesc Represents a node in the tree.\n   * @constructor\n   * @param {object} data - that is to be stored in a node\n   */\n  function TreeNode(data){\n\n    /**\n     * Represents the parent node\n     *\n     * @property _parentNode\n     * @type {object}\n     * @default \"null\"\n     */\n    this._parentNode = null;\n\n    /**\n     * Represents the child nodes\n     *\n     * @property _childNodes\n     * @type {array}\n     * @default \"[]\"\n     */\n    this._childNodes = [];\n\n    /**\n     * Represents the data node has\n     *\n     * @property _data\n     * @type {object}\n     * @default \"null\"\n     */\n    this._data = data;\n\n    /**\n     * Depth of the node represents level in hierarchy\n     *\n     * @property _depth\n     * @type {number}\n     * @default -1\n     */\n    this._depth = -1;\n\n  }\n\n  // ------------------------------------\n  // Getters and Setters\n  // ------------------------------------\n\n  /**\n   * Returns a parent node of current node\n   *\n   * @method parentNode\n   * @memberof TreeNode\n   * @instance\n   * @return {TreeNode} - parent of current node\n   */\n  TreeNode.prototype.parentNode = function(){\n    return this._parentNode;\n  };\n\n  /**\n   * Returns an array of child nodes\n   *\n   * @method childNodes\n   * @memberof TreeNode\n   * @instance\n   * @return {array} - array of child nodes\n   */\n  TreeNode.prototype.childNodes = function(){\n    return this._childNodes;\n  };\n\n  /**\n   * Sets or gets the data belonging to this node. Data is what user sets using `insert` and `insertTo` methods.\n   *\n   * @method data\n   * @memberof TreeNode\n   * @instance\n   * @param {object | array | string | number | null} data - data which is to be stored\n   * @return {object | array | string | number | null} - data belonging to this node\n   */\n  TreeNode.prototype.data = function(data){\n    if(arguments.length > 0){\n      this._data = data;\n    } else {\n      return this._data;\n    }\n  };\n\n  /**\n   * Depth of the node. Indicates the level at which node lies in a tree.\n   *\n   * @method depth\n   * @memberof TreeNode\n   * @instance\n   * @return {number} - depth of node\n   */\n  TreeNode.prototype.depth = function(){\n    return this._depth;\n  };\n\n  // ------------------------------------\n  // Methods\n  // ------------------------------------\n\n  /**\n   * Indicates whether this node matches the specified criteria. It triggers a callback criteria function that returns something.\n   *\n   * @method matchCriteria\n   * @memberof TreeNode\n   * @instance\n   * @param {function} callback - Callback function that specifies some criteria. It receives {@link TreeNode#_data} in parameter and expects different values in different scenarios.\n   * `matchCriteria` is used by following functions and expects:\n   * 1. {@link Tree#searchBFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 2. {@link Tree#searchDFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 3. {@link Tree#export} - {object} in return indicating formatted data object.\n   */\n  TreeNode.prototype.matchCriteria = function(criteria){\n    return criteria(this._data);\n  };\n\n  /**\n   * get sibling nodes.\n   *\n   * @method siblings\n   * @memberof TreeNode\n   * @instance\n   * @return {array} - array of instances of {@link TreeNode}\n   */\n  TreeNode.prototype.siblings = function(){\n    var thiss = this;\n    return !this._parentNode ? [] : this._parentNode._childNodes.filter(function(_child){\n      return _child !== thiss;\n    });\n  };\n\n  /**\n   * Finds distance of node from root node\n   *\n   * @method distanceToRoot\n   * @memberof TreeNode\n   * @instance\n   * @return {array} - array of instances of {@link TreeNode}\n   */\n  TreeNode.prototype.distanceToRoot = function(){\n\n    // Initialize Distance and Node\n    var distance = 0,\n        node = this;\n\n    // Loop Over Ancestors\n    while(node.parentNode()){\n      distance++;\n      node = node.parentNode();\n    }\n\n    // Return\n    return distance;\n\n  };\n\n  /**\n   * Gets an array of all ancestor nodes including current node\n   *\n   * @method getAncestry\n   * @memberof TreeNode\n   * @instance\n   * @return {Array} - array of ancestor nodes\n   */\n  TreeNode.prototype.getAncestry = function(){\n\n    // Initialize empty array and node\n    var ancestors = [this],\n        node = this;\n\n    // Loop over ancestors and add them in array\n    while(node.parentNode()){\n      ancestors.push(node.parentNode());\n      node = node.parentNode();\n    }\n\n    // Return\n    return ancestors;\n\n  };\n\n  /**\n   * Exports the node data in format specified. It maintains herirachy by adding\n   * additional \"children\" property to returned value of `criteria` callback.\n   *\n   * @method export\n   * @memberof TreeNode\n   * @instance\n   * @param {TreeNode~criteria} criteria - Callback function that receives data in parameter\n   * and MUST return a formatted data that has to be exported. A new property \"children\" is added to object returned\n   * that maintains the heirarchy of nodes.\n   * @return {object} - {@link TreeNode}.\n   * @example\n   *\n   * var rootNode = tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * tree.insert({\n   *   key: '#greenapple',\n   *   value: { name: 'Green Apple', color: 'Green'}\n   * });\n   *\n   * tree.insertToNode(rootNode,  {\n   *  key: '#someanotherapple',\n   *  value: { name: 'Some Apple', color: 'Some Color' }\n   * });\n   *\n   * // Export the tree\n   * var exported = rootNode.export(function(data){\n   *  return { name: data.value.name };\n   * });\n   *\n   * // Result in `exported`\n   * {\n   * \"name\": \"Apple\",\n   * \"children\": [\n   *   {\n   *     \"name\": \"Green Apple\",\n   *     \"children\": []\n   *   },\n   *   {\n   *     \"name\": \"Some Apple\",\n   *     \"children\": []\n   *  }\n   * ]\n   *}\n   *\n   */\n  TreeNode.prototype.export = function(criteria){\n\n    // Check if criteria is specified\n    if(!criteria || typeof criteria !== 'function')\n      throw new Error('Export criteria not specified');\n\n    // Export every node recursively\n    var exportRecur = function(node){\n      var exported = node.matchCriteria(criteria);\n      if(!exported || typeof exported !== 'object'){\n        throw new Error('Export criteria should always return an object and it cannot be null.');\n      } else {\n        exported.children = [];\n        node._childNodes.forEach(function(_child){\n          exported.children.push(exportRecur(_child));\n        });\n\n        return exported;\n      }\n    };\n\n    return exportRecur(this);\n  };\n\n  // ------------------------------------\n  // Export\n  // ------------------------------------\n\n  return TreeNode;\n\n}());\n","var TreeNode = require('./tree-node');\nvar Traverser = require('./traverser');\nmodule.exports = (function(){\n\n  // Flag bad practises\n  'use strict';\n\n  // ------------------------------------\n  // Basic Setup\n  // ------------------------------------\n\n  /**\n   * @class Tree\n   * @classdesc Represents the tree in which data nodes can be inserted\n   * @constructor\n   */\n   function Tree(){\n\n    /**\n     * Represents the root node of the tree.\n     *\n     * @member\n     * @type {object}\n     * @default \"null\"\n     */\n    this._rootNode = null;\n\n    /**\n     * Represents the current node in question. `_currentNode` points to most recent\n     * node inserted or parent node of most recent node removed.\n     *\n     * @member\n    * @memberof Tree.\n     * @type {object}\n     * @default \"null\"\n     */\n    this._currentNode = null;\n\n    /**\n     * Represents the traverser which search/traverse a tree in DFS and BFS fashion.\n     *\n     * @member\n     * @memberof Tree\n     * @type {object}\n     * @instance\n     * @default {@link Traverser}\n     */\n    this._traverser = new Traverser(this);\n\n  }\n\n  // ------------------------------------\n  // Getters and Setters\n  // ------------------------------------\n\n  /**\n   * Returns a root node of the tree.\n   *\n   * @method rootNode\n   * @memberof Tree\n   * @instance\n   * @return {TreeNode} - root node of the tree.\n   */\n  Tree.prototype.rootNode = function(){\n    return this._rootNode;\n  };\n\n  /**\n   * Returns a current node in a tree\n   *\n   * @method currentNode\n   * @memberof Tree\n   * @instance\n   * @return {TreeNode} - current node of the tree.\n   */\n  Tree.prototype.currentNode = function(){\n    return this._currentNode;\n  };\n\n  /**\n   * Getter function that returns {@link Traverser}.\n   *\n   * @method traverser\n   * @memberof Tree\n   * @instance\n   * @return {@link Traverser} for the tree.\n   */\n  Tree.prototype.traverser = function(){\n    return this._traverser;\n  };\n\n  // ------------------------------------\n  // Methods\n  // ------------------------------------\n\n  /**\n   * Checks whether tree is empty.\n   *\n   * @method isEmpty\n   * @memberof Tree\n   * @instance\n   * @return {boolean} whether tree is empty.\n   */\n  Tree.prototype.isEmpty = function(){\n    return this._rootNode === null && this._currentNode === null;\n  };\n\n  /**\n   * Empties the tree. Removes all nodes from tree.\n   *\n   * @method pruneAllNodes\n   * @memberof Tree\n   * @instance\n   * @return {@link Tree} empty tree.\n   */\n  Tree.prototype.pruneAllNodes = function(){\n    if(this._rootNode && this._currentNode) this.trimBranchFrom(this._rootNode);\n    return this;\n  };\n\n  /**\n   * Creates a {@link TreeNode} that contains the data provided and insert it in a tree.\n   * New node gets inserted to the `_currentNode` which updates itself upon every insertion and deletion.\n   *\n   * @method insert\n   * @memberof Tree\n   * @instance\n   * @param {object} data - data that has to be stored in tree-node.\n   * @return {object} - instance of {@link TreeNode} that represents node inserted.\n   * @example\n   *\n   * // Insert single value\n   * tree.insert(183);\n   *\n   * // Insert array of values\n   * tree.insert([34, 565, 78]);\n   *\n  * // Insert complex data\n   * tree.insert({\n   *   key: '#berries',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   */\n  Tree.prototype.insert = function(data){\n    var node = new TreeNode(data);\n    if(this._rootNode === null && this._currentNode === null){\n      node._depth = 1;\n      this._rootNode = this._currentNode = node;\n    } else {\n      node._parentNode = this._currentNode;\n      this._currentNode._childNodes.push(node);\n      this._currentNode = node;\n      node.depth = node._parentNode._depth + 1;\n    }\n    return node;\n  };\n\n  /**\n   * Removes a node from tree and updates `_currentNode` to parent node of node removed.\n   *\n   * @method remove\n   * @memberof Tree\n   * @instance\n   * @param {object} node - {@link TreeNode} that has to be removed.\n   * @param {boolean} trim - indicates whether to remove entire branch from the specified node.\n   */\n  Tree.prototype.remove = function(node, trim){\n    if(trim || node === this._rootNode){\n\n      // Trim Entire branch\n      this.trimBranchFrom(node);\n\n    } else {\n\n      // Upate children's parent to grandparent\n      node._childNodes.forEach(function(_child){\n        _child._parentNode = node._parentNode;\n        node._parentNode._childNodes.push(_child);\n      });\n\n      // Delete itslef from parent child array\n      node._parentNode._childNodes.splice(node._parentNode._childNodes.indexOf(node), 1);\n\n      // Update Current Node\n      this._currentNode = node._parentNode;\n\n      // Clear Child Array\n      node._childNodes = [];\n      node._parentNode = null;\n      node._data = null;\n\n    }\n  };\n\n  /**\n   * Remove an entire branch starting with specified node.\n   *\n   * @method trimBranchFrom\n   * @memberof Tree\n   * @instance\n   * @param {object} node - {@link TreeNode} from which entire branch has to be removed.\n   */\n  Tree.prototype.trimBranchFrom = function(node){\n\n    // Hold `this`\n    var thiss = this;\n\n    // trim brach recursively\n    (function recur(node){\n      node._childNodes.forEach(recur);\n      node._childNodes = [];\n      node._data = null;\n    }(node));\n\n    // Update Current Node\n    if(node._parentNode){\n      node._parentNode._childNodes.splice(node._parentNode._childNodes.indexOf(node), 1);\n      thiss._currentNode = node._parentNode;\n    } else {\n      thiss._rootNode = thiss._currentNode = null;\n    }\n  };\n\n  /**\n   * Inserts node to a particular node present in the tree. Particular node here is searched\n   * in the tree based on the criteria provided.\n   *\n   * @method insertTo\n   * @memberof Tree\n   * @instance\n   * @param {function} criteria - Callback function that specifies the search criteria\n   * for node to which new node is to be inserted. Criteria callback here receives {@link TreeNode#_data}\n   * in parameter and MUST return boolean indicating whether that data satisfies your criteria.\n   * @param {object} data - that has to be stored in tree-node.\n   * @return {object} - instance of {@link TreeNode} that represents node inserted.\n   * @example\n   *\n   * // Insert data\n   * tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * // New Data\n   * var greenApple = {\n   *  key: '#greenapple',\n   *  value: { name: 'Green Apple', color: 'Green' }\n   * };\n   *\n   * // Insert data to node which has `key` = #apple\n   * tree.insertTo(function(data){\n   *  return data.key === '#apple'\n   * }, greenApple);\n   */\n  Tree.prototype.insertTo = function(criteria, data){\n    var node = this.traverser().searchDFS(criteria);\n    return this.insertToNode(node, data);\n  };\n\n  /**\n   * Inserts node to a particular node present in the tree. Particular node here is an instance of {@link TreeNode}\n   *\n   * @method insertToNode\n   * @memberof Tree\n   * @instance\n   * @param {function} node -  {@link TreeNode} to which data node is to be inserted.\n   * @param {object} data - that has to be stored in tree-node.\n   * @return {object} - instance of {@link TreeNode} that represents node inserted.\n   * @example\n   *\n   * // Insert data\n   * var node = tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * // New Data\n   * var greenApple = {\n   *  key: '#greenapple',\n   *  value: { name: 'Green Apple', color: 'Green' }\n   * };\n   *\n   * // Insert data to node\n   * tree.insertToNode(node, greenApple);\n   */\n  Tree.prototype.insertToNode = function(node, data){\n    var newNode = new TreeNode(data);\n    newNode._parentNode = node;\n    newNode._depth = newNode._parentNode._depth + 1;\n    node._childNodes.push(newNode);\n    this._currentNode = newNode;\n    return newNode;\n  };\n\n  /**\n   * Finds a distance between two nodes\n   *\n   * @method distanceBetween\n   * @memberof Tree\n   * @instance\n   * @param {@link TreeNode} fromNode -  Node from which distance is to be calculated\n   * @param {@link TreeNode} toNode - Node to which distance is to be calculated\n   * @return {Number} - distance(number of hops) between two nodes.\n   */\n  Tree.prototype.distanceBetween = function(fromNode, toNode){\n    return fromNode.distanceToRoot() + toNode.distanceToRoot() - 2 *  this.findCommonParent(fromNode, toNode).distanceToRoot();\n  };\n\n  /**\n   * Finds a common parent between nodes\n   *\n   * @method findCommonParent\n   * @memberof Tree\n   * @instance\n   * @param {@link TreeNode} fromNode\n   * @param {@link TreeNode} toNode\n   * @return {@link TreeNode} - common parent\n   */\n  Tree.prototype.findCommonParent = function(fromNode, toNode){\n\n    // Get ancestory of both nodes\n    var fromNodeAncestors = fromNode.getAncestry();\n    var toNodeAncestors = toNode.getAncestry();\n\n    // Find Commont\n    var common = null;\n    fromNodeAncestors.some(function(ancestor){\n      if(toNodeAncestors.indexOf(ancestor) !== -1){\n        common = ancestor;\n        return true;\n      }\n    });\n\n    // Return Common\n    return common;\n\n  };\n\n  /**\n   * Exports the tree data in format specified. It maintains herirachy by adding\n   * additional \"children\" property to returned value of `criteria` callback.\n   *\n   * @method export\n   * @memberof Tree\n   * @instance\n   * @param {Tree~criteria} criteria - Callback function that receives data in parameter\n   * and MUST return a formatted data that has to be exported. A new property \"children\" is added to object returned\n   * that maintains the heirarchy of nodes.\n   * @return {object} - {@link TreeNode}.\n   * @example\n   *\n   * var rootNode = tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * tree.insert({\n   *   key: '#greenapple',\n   *   value: { name: 'Green Apple', color: 'Green'}\n   * });\n   *\n   * tree.insertToNode(rootNode,  {\n   *  key: '#someanotherapple',\n   *  value: { name: 'Some Apple', color: 'Some Color' }\n   * });\n   *\n   * // Export the tree\n   * var exported = tree.export(function(data){\n   *  return { name: data.value.name };\n   * });\n   *\n   * // Result in `exported`\n   * {\n   * \"name\": \"Apple\",\n   * \"children\": [\n   *   {\n   *     \"name\": \"Green Apple\",\n   *     \"children\": []\n   *   },\n   *   {\n   *     \"name\": \"Some Apple\",\n   *     \"children\": []\n   *  }\n   * ]\n   *}\n   *\n   */\n  Tree.prototype.export = function(criteria){\n\n    // Check if rootNode is not null\n    if(!this._rootNode){\n      return null;\n    }\n\n    return this._rootNode.export(criteria);\n  };\n\n  /**\n   * Returns a new compressed tree. While compressing it considers nodes that\n   * satisfies given criteria and skips the rest of the nodes, making tree compressed.\n   *\n   * @method compress\n   * @memberof Tree\n   * @instance\n   * @param {Tree~criteria} criteria - Callback function that checks whether node satifies certain criteria. MUST return boolean.\n   * @return {@link Tree} - A new compressed tree.\n   */\n  Tree.prototype.compress = function(criteria){\n\n    // Check if criteria is specified\n    if(!criteria || typeof criteria !== 'function')\n      throw new Error('Compress criteria not specified');\n\n    // Check if tree is not empty\n    if(this.isEmpty()){\n      return null;\n    }\n\n    // Create New Tree\n    var tree = new Tree();\n\n    // Hold `this`\n    var thiss = this;\n\n    // Recur DFS\n    (function recur(node, parent){\n\n      // Check-in\n      var checkIn = thiss.rootNode() === node || node.matchCriteria(criteria);\n\n      // Check if checked-in\n      if(checkIn){\n        if(tree.isEmpty()){\n          parent = tree.insert(node.data());\n        } else {\n          parent = tree.insertToNode(parent, node.data());\n        }\n      } else {\n        parent._data.hasCompressedNodes = true;\n      }\n\n      // For all child nodes\n      node.childNodes().forEach(function(_child){\n        recur(_child, parent);\n      });\n\n    }(this.rootNode(), null));\n\n    return tree;\n\n  };\n\n  /**\n   * Imports the JSON data into a tree using the criteria provided.\n   * A property indicating the nesting of object must be specified.\n   *\n   * @method import\n   * @memberof Tree\n   * @instance\n   * @param {object} data - JSON data that has be imported\n   * @param {string} childProperty - Name of the property that holds the nested data.\n   * @param {Tree~criteria} criteria - Callback function that receives data in parameter\n   * and MUST return a formatted data that has to be imported in a tree.\n   * @return {object} - {@link Tree}.\n   * @example\n   *\n   * var data = {\n   *   \"trailId\": \"h2e67d4ea-f85f40e2ae4a06f4777864de\",\n   *   \"initiatedAt\": 1448393492488,\n   *   \"snapshots\": {\n   *      \"snapshotId\": \"b3d132131-213c20f156339ea7bdcb6273\",\n   *      \"capturedAt\": 1448393495353,\n   *      \"thumbnail\": \"data:img\",\n   *      \"children\": [\n   *       {\n   *        \"snapshotId\": \"yeb7ab27c-b36ff1b04aefafa9661243de\",\n   *        \"capturedAt\": 1448393499685,\n   *        \"thumbnail\": \"data:image/\",\n   *        \"children\": [\n   *          {\n   *            \"snapshotId\": \"a00c9828f-e2be0fc4732f56471e77947a\",\n   *            \"capturedAt\": 1448393503061,\n   *            \"thumbnail\": \"data:image/png;base64\",\n   *            \"children\": []\n   *          }\n   *        ]\n   *      }\n   *     ]\n   *   }\n   * };\n   *\n   *  // Import\n   *  // This will result in a tree having nodes containing `id` and `thumbnail` as data\n   *  tree.import(data, 'children', function(nodeData){\n   *    return {\n   *      id: nodeData.snapshotId,\n   *      thumbnail: nodeData.thumbnail\n   *     }\n   *  });\n   *\n   */\n  Tree.prototype.import = function(data, childProperty, criteria){\n\n    // Empty all tree\n    if(this._rootNode) this.trimBranchFrom(this._rootNode);\n\n    // Set Current Node to root node as null\n    this._currentNode = this._rootNode = null;\n\n    // Hold `this`\n    var thiss = this;\n\n    // Import recursively\n    (function importRecur(node, recurData){\n\n      // Format data from given criteria\n      var _data = criteria(recurData);\n\n      // Create Root Node\n      if(!node){\n        node = thiss.insert(_data);\n      } else {\n        node = thiss.insertToNode(node, _data);\n      }\n\n      // For Every Child\n      recurData[childProperty].forEach(function(_child){\n        importRecur(node, _child);\n      });\n\n    }(this._rootNode, data));\n\n    // Set Current Node to root node\n    this._currentNode = this._rootNode;\n\n    return this;\n\n  };\n\n  /**\n   * Callback that receives a node data in parameter and expects user to return one of following:\n   * 1. {@link Traverser#searchBFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 2. {@link Traverser#searchDFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 3. {@link Tree#export} - {object} in return indicating formatted data object.\n   * @callback criteria\n   * @param data {object} - data of particular {@link TreeNode}\n   */\n\n   // ------------------------------------\n   // Export\n   // ------------------------------------\n\n  return Tree;\n\n}());\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n/**\r\n * Checks if two objects are equal. This is a surrogate to simulate the\r\n * behavior of Object.equals in Java. If the first object has an equals()\r\n * method, it is called; otherwise, standard equality between JavaScript\r\n * objects is used.\r\n * @param o1 The first object\r\n * @param o2 The second object\r\n * @return true if the two objects are equal, false otherwise\r\n */\r\nfunction same_object(o1, o2) {\r\n    if (o1 == null && o2 == null) {\r\n        return true;\r\n    }\r\n    if ((o1 == null && o2 != null) || (o1 != null && o2 == null)) {\r\n        return false;\r\n    }\r\n    // assert: o1 != null && o2 != null\r\n    if (typeof(o1).equals === \"function\") {\r\n        // Two objects that implement equals\r\n        return o1.equals(o2);\r\n    }\r\n    return o1 === o2;\r\n}\r\n\r\nfunction map_get(m, k) {\r\n    for (const [key, value] of m) {\r\n        if (key.equals(k)) {\r\n            return value;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction map_contains(m, k) {\r\n    for (const [key] of m) {\r\n        if (same_object(key, k)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction map_put(m, k, v) {\r\n    for (const [key] of m) {\r\n        if (same_object(key, k)) {\r\n            m.set(key, v);\r\n            return;\r\n        }\r\n    }\r\n    m.set(k, v);\r\n}\r\n\r\nfunction set_contains(s, x) {\r\n    for (var i = 0; i < s.length; i++) {\r\n        if (same_object(s[i], x)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isHtmlElement(obj) {\r\n    if (typeof obj != 'object') {\r\n        return false;\r\n    }\r\n    while (obj.constructor.name !== \"\" && obj.constructor.name !== \"Object\") {\r\n        if ((obj.name || obj.constructor.name) === \"HTMLElement\") {\r\n            return true;\r\n        }\r\n        obj = Object.getPrototypeOf(obj.constructor);\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { map_contains, map_get, map_put, same_object, set_contains, isHtmlElement };","/*\r\n   A lineage library for DOM nodes\r\n  MIT License\r\n\r\n  Copyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n  Eckinox Média and Université du Québec à Chicoutimi\r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n  of this software and associated documentation files (the \"Software\"), to deal\r\n  in the Software without restriction, including without limitation the rights\r\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n  copies of the Software, and to permit persons to whom the Software is\r\n  furnished to do so, subject to the following conditions:\r\n\r\n  The above copyright notice and this permission notice shall be included in all\r\n  copies or substantial portions of the Software.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n  SOFTWARE.\r\n*/\r\n\r\n/**\r\n * Imports\r\n */\r\n// Local imports\r\nimport { same_object } from \"./util.mjs\";\r\n\r\n/**\r\n * Abstract class representing all functions that extract parts of an\r\n * object.\r\n */\r\nclass Designator {\r\n    /**\r\n     * Creates a new instance of designator.\r\n     */\r\n    constructor() {\r\n        // Nothing to do\r\n    }\r\n\r\n    /**\r\n     * Extracts the designator at the head of a composition. For designators that\r\n     * are atomic, returns the designator itself.\r\n     */\r\n    head() {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Extracts the designator made of the tail of a composition. For designators\r\n     * that are atomic, returns null.\r\n     */\r\n    tail() {\r\n        return null;\r\n    }\r\n\r\n    equals(o) {\r\n        if (o == null || !(o instanceof Designator)) {\r\n            return false;\r\n        }\r\n        return o == this;\r\n    }\r\n}\r\n\r\n/**\r\n * A special designator that designates \"nothing\".\r\n * @extends Designator\r\n */\r\nclass Nothing extends Designator {\r\n    static instance = new Nothing();\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    toString() {\r\n        return \"Nothing\";\r\n    }\r\n\r\n    equals(o) {\r\n        if (o == null || !(o instanceof Nothing)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * A special designator that designates \"unknown\".\r\n * @extends Designator\r\n */\r\nclass Unknown extends Designator {\r\n    static instance = new Unknown();\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    toString() {\r\n        return \"Unknown\";\r\n    }\r\n\r\n    equals(o) {\r\n        if (o == null || !(o instanceof Unknown)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * A special designator that designates all of an object.\r\n * @extends Designator\r\n */\r\nclass All extends Designator {\r\n    static instance = new All();\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    toString() {\r\n        return \"All\";\r\n    }\r\n\r\n    equals(o) {\r\n        if (o == null || !(o instanceof All)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * Designator expressed as the composition of atomic designators.\r\n * @param Any number of designators\r\n * @extends Designator\r\n */\r\nclass CompoundDesignator extends Designator {\r\n    /**\r\n     * Creates a flat compound designator from a list of other designators.\r\n     */\r\n    static create() {\r\n        if (arguments.length == 0) {\r\n            return Nothing.instance;\r\n        }\r\n        var designators = [];\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            if (arguments[i] == null) {\r\n                continue;\r\n            }\r\n            if (arguments[i] instanceof CompoundDesignator) {\r\n                designators.push(...arguments[i].elements);\r\n            } else {\r\n                designators.push(arguments[i]);\r\n            }\r\n        }\r\n        if (designators.length == 0) {\r\n            return Nothing.instance;\r\n        }\r\n        if (designators.length == 1) {\r\n            return designators[0];\r\n        }\r\n        return new CompoundDesignator(...designators);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.elements = [];\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            this.add(arguments[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a designator to the composition.\r\n     * @param d The designator to add. If it is compound, each of its elements are\r\n     * added individually. This helps keeping the compound designators \"flat\".\r\n     * If d is null, the input is simply ignored and nothing happens.\r\n     */\r\n    add(d) {\r\n        if (d == null) {\r\n            return;\r\n        }\r\n        if (d instanceof CompoundDesignator) {\r\n            for (var j = 0; j < d.elements.length; j++) {\r\n                this.add(d.elements[j]);\r\n            }\r\n        } else {\r\n            this.elements.push(d);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the size (number of atomic designators) contained in this composite\r\n     * designator.\r\n     * @return The number of atomic designators\r\n     */\r\n    size() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    head() {\r\n        if (this.elements.length == 0) {\r\n            return new Nothing();\r\n        }\r\n        return this.elements[this.elements.length - 1];\r\n    }\r\n\r\n    tail() {\r\n        if (this.elements.length <= 1) {\r\n            return null;\r\n        }\r\n        if (this.elements.length == 2) {\r\n            return this.elements[0];\r\n        }\r\n        var new_d = new CompoundDesignator();\r\n        for (var i = 0; i < this.elements.length - 1; i++) {\r\n            new_d.add(this.elements[i]);\r\n        }\r\n        return new_d;\r\n    }\r\n\r\n    toString() {\r\n        var s = \"\";\r\n        for (var i = 0; i < this.elements.length; i++) {\r\n            if (i > 0) {\r\n                s += \" of \";\r\n            }\r\n            s += this.elements[i].toString();\r\n        }\r\n        return s;\r\n    }\r\n\r\n    equals(o) {\r\n        if (o == null || !(o instanceof CompoundDesignator)) {\r\n            return false;\r\n        }\r\n        if (o.size() != this.size()) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < this.elements.length; i++) {\r\n            if (!same_object(this.elements[i], o.elements[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * Module exports\r\n */\r\nexport { All, CompoundDesignator, Designator, Nothing, Unknown };","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n// Local imports\r\nimport { CompoundDesignator, Designator } from \"./designator.mjs\";\r\n\r\n/**\r\n * Object produced by the call(this) to a function, and whose lineage\r\n * can be computed.\r\n */\r\nclass Value {\r\n    /*\r\n    constructor() {\r\n    \t// Nothing to do\r\n    }\r\n    */\r\n\r\n    /**\r\n     * Gets the concrete value carried by this Value object.\r\n     * @return The value\r\n     */\r\n    getValue() {\r\n        // To be overridden by descendants\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Queries the provenance of a value.\r\n     * @param type The type of lineage relationship\r\n     * @param d A designator representing the part of the object that is the\r\n     * subject of the query\r\n     * @param root The node to which the rsults of the query should be appended\r\n     * as children\r\n     * @param A factory to produce traceability nodes\r\n     * @return The list of terminal traceability nodes produced by this query\r\n     */\r\n    query(type, d, root, factory) {\r\n        // To be overridden by descendants\r\n    }\r\n\r\n    /**\r\n     * Converts an arbitrary object into a {@link Value}.\r\n     * @param o The object to convert. If o is a {@link Value}, it is returned as\r\n     * is. Otherwise, o is converted into a {@link ConstantValue} that returns o.\r\n     * @return The converted value\r\n     */\r\n    static lift(o) {\r\n        if (o instanceof Value) {\r\n            return o;\r\n        }\r\n        return new ConstantValue(o);\r\n    }\r\n}\r\n\r\n/**\r\n * Value that is linked to a list of other values. This class is the\r\n * ancestor used for values produced by most n-ary atomic functions.\r\n * @extends Value\r\n */\r\nclass NaryValue extends Value {\r\n    /**\r\n     * Creates a new instance of this value.\r\n     * @param {Object} value The value to produce\r\n     * @param {Array} values An array of {@link Value}s that are linked to\r\n     * this value\r\n     * @param {Array} positions An array of integers with the position of\r\n     * each input value in the function's arguments\r\n     */\r\n    constructor(value, values = [], positions = []) {\r\n        super();\r\n        this.value = value;\r\n        this.values = values;\r\n        this.positions = positions;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\n/**\r\n * Special type of value that always returns the same constant.\r\n * @param o The constant to return\r\n * @extends Value\r\n */\r\nclass ConstantValue extends Value {\r\n    constructor(o) {\r\n        super();\r\n\r\n        /**\r\n         * The value represented by this constant\r\n         */\r\n        this.value = o;\r\n    }\r\n\r\n    query(q, d, root, factory) {\r\n        var leaves = [];\r\n        var new_d = CompoundDesignator.create(d, new ConstantDesignator());\r\n        var n = factory.getObjectNode(new_d, this.value);\r\n        root.addChild(n);\r\n        leaves.push(n);\r\n        return leaves;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n\r\n    equals(o) {\r\n        if (o == null || !(o instanceof Value)) {\r\n            return false;\r\n        }\r\n        return o.getValue() === this.value;\r\n    }\r\n}\r\n/**\r\n * Atomic designator that points to the value of a constant.\r\n * @extends Designator\r\n */\r\nclass ConstantDesignator extends Designator {\r\n    /*\r\n    constructor() {\r\n    \tsuper();\r\n    }\r\n    */\r\n\r\n    toString() {\r\n        return \"Value\";\r\n    }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { ConstantDesignator, ConstantValue, NaryValue, Value };","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n// Local imports\r\nimport { Designator } from \"./designator.mjs\";\r\nimport { Value } from \"./value.mjs\";\r\nimport {\r\n    Addition,\r\n    BackgroundColor,\r\n    BackgroundImage,\r\n    BorderColor,\r\n    BorderRadius,\r\n    BorderStyle,\r\n    BorderWidth,\r\n    CssPropertyFunction,\r\n    Color,\r\n    CompoundDesignator,\r\n    ComposedFunction,\r\n    ConstantDesignator,\r\n    DimensionHeight,\r\n    Display,\r\n    DimensionWidth,\r\n    ElementAttributeValue,\r\n    EnumeratedValue,\r\n    FindBySelector,\r\n    Float,\r\n    FontFamily,\r\n    FontSize,\r\n    FontWeight,\r\n    GreaterThan,\r\n    GreaterOrEqual,\r\n    IsEqualTo,\r\n    MarginTop,\r\n    MarginBottom,\r\n    MarginRight,\r\n    MarginLeft,\r\n    ObjectNode,\r\n    Opacity,\r\n    Path,\r\n    PathValue,\r\n    PaddingTop,\r\n    PaddingBottom,\r\n    PaddingRight,\r\n    PaddingLeft,\r\n    Position,\r\n    TestCondition,\r\n    Tracer,\r\n    UniversalQuantifier,\r\n    Visibility,\r\n    Zindex,\r\n} from \"../index.mjs\";\r\n//import { extractJSON } from \"./extractJson.mjs\";\r\n/**\r\n * Abstract class representing a function.\r\n */\r\nclass AbstractFunction {\r\n    constructor() {\r\n        this.members = []; \r\n    }\r\n\r\n    /**\r\n     * Converts an arbitrary object into a {@link Function}.\r\n     * @param o The object to convert. If o is a function, it is returned as is.\r\n     * Otherwise, o is converted into a {@link ConstantFunction} that returns\r\n     * the {@link Value} lifted from o.\r\n     * @return The converted function\r\n     */\r\n    static lift(o) {\r\n        if (o instanceof AbstractFunction) {\r\n            return o;\r\n        }\r\n        return new ConstantFunction(Value.lift(o));\r\n    }\r\n\r\n    /**\r\n     * Computes the return value of the function from its provided input\r\n     * arguments.\r\n     * @param arguments A variable number of input arguments\r\n     * @return The return value of the function\r\n     */\r\n    evaluate() {\r\n        // To be overridden by descendants\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Binds a variable name to a specific value.\r\n     * @param variable The name of the variable\r\n     * @param value The value to bind this variable to\r\n     */\r\n    setTo(variable, value) {\r\n        // To be overridden by descendants\r\n    }\r\n\r\n    /**\r\n     * Gets the arity of the function.\r\n     * @return The arity\r\n     */\r\n    getArity() {\r\n        return 0;\r\n    }\r\n\r\n    equals(o) {\r\n        if (o == null || !(o instanceof AbstractFunction)) {\r\n            return false;\r\n        }\r\n        return o == this;\r\n    }\r\n\r\n    // d is a deserializer and j is a JSON structure\r\n    static deserialize(d, j) {\r\n        const params = [];\r\n\r\n        for (const serializedParam of j.contents) {\r\n            if (typeof serializedParam == \"object\" && Object.keys(serializedParam).length == 2 && typeof serializedParam.name != \"undefined\" && typeof serializedParam.contents != \"undefined\") {\r\n                params.push(d.deserialize(serializedParam));\r\n            } else {\r\n                params.push(serializedParam);\r\n            }\r\n        }\r\n\r\n        return new this(...params);\r\n    }\r\n\r\n    toJson() {\r\n        const serializedMembers = [];\r\n\r\n        for (const member of this.members) {\r\n            if (typeof member == \"object\" && AbstractFunction.isPrototypeOf(member.constructor)) {\r\n                serializedMembers.push(member.toJson())\r\n            } else {\r\n                serializedMembers.push(member);\r\n            }\r\n        }\r\n\r\n        return {\r\n            \"name\": this.constructor.name,\r\n            \"contents\": serializedMembers\r\n        };\r\n    }\r\n\r\n    \r\n}\r\n\r\n/**\r\n * Atomic designator representing the return value of a function.\r\n * @extends Designator\r\n */\r\nclass ReturnValue extends Designator {\r\n    static instance = new ReturnValue();\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    toString() {\r\n        return \"!\";\r\n    }\r\n\r\n    equals(o) {\r\n        if (o == null || !(o instanceof ReturnValue)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * Atomic designator representing one of the input arguments of a function.\r\n * @param index The index of the input argument\r\n * @extends Designator\r\n */\r\nclass InputArgument extends Designator {\r\n    constructor(index) {\r\n        super();\r\n\r\n        /**\r\n         * The index of the input argument\r\n         */\r\n        this.index = index;\r\n    }\r\n\r\n    /**\r\n     * Gets the index of this argument.\r\n     */\r\n    getIndex() {\r\n        return this.index;\r\n    }\r\n\r\n    toString() {\r\n        return \"@\" + this.index;\r\n    }\r\n\r\n    equals(o) {\r\n        if (o == null || !(o instanceof InputArgument)) {\r\n            return false;\r\n        }\r\n        return o.getIndex() == this.index;\r\n    }\r\n}\r\n\r\n/**\r\n * Function or arity 0 that always returns the same object.\r\n * @extends AbstractFunction\r\n */\r\nclass ConstantFunction extends AbstractFunction {\r\n    /**\r\n     * Creates a new instance of constant function.\r\n     * @param o The object to return\r\n     */\r\n    constructor(o) {\r\n        super();\r\n        this.members = [o];\r\n        this.value = Value.lift(o);\r\n    }\r\n\r\n    evaluate() {\r\n        return this.value;\r\n    }\r\n\r\n    getArity() {\r\n        return 0;\r\n    }\r\n\r\n    set(variable, value) {\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * Module exports\r\n */\r\nexport { AbstractFunction, ConstantFunction, InputArgument, ReturnValue };","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n// Local imports\r\nimport { CompoundDesignator } from \"./designator.mjs\";\r\nimport { AbstractFunction, InputArgument, ReturnValue } from \"./function.mjs\";\r\nimport { Value } from \"./value.mjs\";\r\n//import { NaryConjunctiveVerdict, NaryDisjunctiveVerdict } from \"./booleans.mjs\"\r\n\r\n/**\r\n * Function that performs a direct computation on its input arguments. This is\r\n * opposed to a {@link ComposedFunction} that call(this)s other functions to produce\r\n * its return value.\r\n * @param arity The input arity of the function\r\n * @extends AbstractFunction\r\n */\r\nclass AtomicFunction extends AbstractFunction {\r\n    constructor(arity) {\r\n        super();\r\n\r\n        /**\r\n         * The input arity of the function\r\n         */\r\n        this.arity = arity;\r\n    }\r\n\r\n    evaluate() {\r\n        var values = [];\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            values[i] = Value.lift(arguments[i]);\r\n        }\r\n        return this.compute(...values);\r\n    }\r\n\r\n    /**\r\n     * Computes the return value of the function from its input arguments.\r\n     * @param arguments A variable number of {@link Values}, whose number\r\n     * must match the input arity of the function.\r\n     * @return The resulting {@link Value}\r\n     */\r\n    compute() {\r\n        if (arguments.length !== this.arity) {\r\n            throw \"Invalid number of arguments\";\r\n        }\r\n        var args = [];\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            args.push(arguments[i].getValue());\r\n        }\r\n        var o = this.getValue(...args);\r\n        if (o instanceof Value) {\r\n            return o;\r\n        }\r\n        return new AtomicFunctionReturnValue(this, o, ...arguments);\r\n    }\r\n    getValue() {\r\n        // To be overridden by descendants\r\n        return null;\r\n    }\r\n\r\n    set() {\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * Value obtained as the output produced by an atomic function call(this).\r\n * @extends Value\r\n */\r\nclass AtomicFunctionReturnValue extends Value {\r\n    /**\r\n     * Creates a new value\r\n     * @param arguments An output value followed by the function's input arguments\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * The function instance this value comes from\r\n         */\r\n        this.referenceFunction = arguments[0];\r\n\r\n        /**\r\n         * The output value produced by the function\r\n         */\r\n        this.outputValue = arguments[1];\r\n\r\n        /**\r\n         * The function's input arguments\r\n         */\r\n        this.inputValues = [];\r\n        for (var i = 2; i < arguments.length; i++) {\r\n            this.inputValues.push(arguments[i]);\r\n        }\r\n    }\r\n\r\n    getValue() {\r\n        return this.outputValue;\r\n    }\r\n\r\n    toString() {\r\n        return this.outputValue.toString();\r\n    }\r\n\r\n    /* @Override */\r\n    query(type, d, root, factory) {\r\n        var leaves = [];\r\n        var n = factory.getAndNode();\r\n        for (var i = 0; i < this.inputValues.length; i++) {\r\n            if (this.inputValues[i] === null) {\r\n                continue;\r\n            }\r\n            var new_d = CompoundDesignator.create(d.tail(), new InputArgument(i));\r\n            var sub_root = factory.getObjectNode(new_d, this.referenceFunction);\r\n            var sub_leaves = [];\r\n            sub_leaves = this.inputValues[i].query(type, ReturnValue.instance, sub_root, factory);\r\n            leaves.push(...sub_leaves);\r\n            n.addChild(sub_root);\r\n        }\r\n        var f_root = factory.getObjectNode(d, this.referenceFunction);\r\n        if (n.getChildren().length === 1) {\r\n            f_root.addChild(n.getChildren()[0]);\r\n        } else {\r\n            f_root.addChild(n);\r\n        }\r\n        root.addChild(f_root);\r\n        return leaves;\r\n    }\r\n}\r\n\r\n/**\r\n * Function that returns its single input argument as is.\r\n * @extends AtomicFunction\r\n */\r\nclass Identity extends AtomicFunction {\r\n    constructor() {\r\n        super(1);\r\n    }\r\n\r\n    getValue() {\r\n        return arguments[0];\r\n    }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { AtomicFunction, AtomicFunctionReturnValue, Identity };","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n// Local imports\r\nimport { InputArgument, ReturnValue } from \"./function.mjs\";\r\nimport { AtomicFunction } from \"./atomic-function.mjs\";\r\nimport { NaryValue } from \"./value.mjs\";\r\nimport { CompoundDesignator } from \"./designator.mjs\";\r\n\r\n/**\r\n * Abstract class representing the binary Boolean connectives \"and\" and \"or\".\r\n * @extends AtomicFunction\r\n */\r\nclass BooleanConnective extends AtomicFunction {\r\n    constructor() {\r\n        super(\"arity\");\r\n    }\r\n\r\n    compute() {\r\n        var false_values = [];\r\n        var false_positions = [];\r\n        var true_values = [];\r\n        var true_positions = [];\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            var o = arguments[i].getValue();\r\n            if (typeof(o) !== \"boolean\") {\r\n                throw \"Invalid argument type\";\r\n            }\r\n            if (o === true) {\r\n                true_values.push(arguments[i]);\r\n                true_positions.push(i);\r\n            } else {\r\n                false_values.push(arguments[i]);\r\n                false_positions.push(i);\r\n            }\r\n        }\r\n        return this.getBooleanValue(false_values, true_values, false_positions, true_positions);\r\n    }\r\n}\r\n\r\n/**\r\n * An {@link NaryValue} that is linked to its input values through an \"or\"\r\n * node.\r\n * @extends NaryValue\r\n */\r\nclass NaryDisjunctiveVerdict extends NaryValue {\r\n    query(q, d, root, factory) {\r\n        var leaves = [];\r\n        var n = factory.getOrNode();\r\n        for (var i = 0; i < this.values.length; i++) {\r\n            var new_d = CompoundDesignator.create(d.tail(), new InputArgument(this.positions[i]));\r\n            var sub_root = factory.getObjectNode(new_d, this.referenceFunction);\r\n            var sub_leaves = [];\r\n            sub_leaves = this.values[i].query(q, ReturnValue.instance, sub_root, factory);\r\n            leaves.push(...sub_leaves);\r\n            n.addChild(sub_root);\r\n        }\r\n        if (n.getChildren().length === 1) {\r\n            root.addChild(n.getChildren()[0]);\r\n        } else {\r\n            root.addChild(n);\r\n        }\r\n        return leaves;\r\n    }\r\n}\r\n\r\n/**\r\n * An {@link NaryValue} that is linked to its input values through an \"and\"\r\n * node.\r\n * @extends NaryValue\r\n */\r\nclass NaryConjunctiveVerdict extends NaryValue {\r\n    constructor(value, values = [], positions = []) {\r\n        super(value, values, positions);\r\n    }\r\n\r\n    query(q, d, root, factory) {\r\n        var leaves = [];\r\n        var n = factory.getAndNode();\r\n        for (var i = 0; i < this.values.length; i++) {\r\n            var new_d = CompoundDesignator.create(d.tail(), new InputArgument(this.positions[i]));\r\n            var sub_root = factory.getObjectNode(new_d, this.referenceFunction);\r\n            var sub_leaves = [];\r\n            sub_leaves = this.values[i].query(q, ReturnValue.instance, sub_root, factory);\r\n            leaves.push(...sub_leaves);\r\n            n.addChild(sub_root);\r\n        }\r\n        if (n.getChildren().length === 1) {\r\n            root.addChild(n.getChildren()[0]);\r\n        } else {\r\n            root.addChild(n);\r\n        }\r\n        return leaves;\r\n    }\r\n}\r\n\r\n/**\r\n * The Boolean \"and\" function.\r\n * @extends BooleanConnective\r\n */\r\nclass BooleanAnd extends BooleanConnective {\r\n    constructor(arity = 2) {\r\n            super(arity);\r\n        }\r\n        /**\r\n         * Gets the Boolean value.\r\n         * @param false_values\r\n         * @param true_values\r\n         * @param false_positions\r\n         * @param true_positions\r\n         */\r\n    getBooleanValue(false_values = [], true_values = [], false_positions = [], true_positions = []) {\r\n        if (false_values.length === 0) {\r\n            return new NaryConjunctiveVerdict(true, true_values, true_positions);\r\n        }\r\n        return new NaryDisjunctiveVerdict(false, false_values, false_positions);\r\n    }\r\n\r\n    toString() {\r\n        return \"And\";\r\n    }\r\n}\r\n\r\n/**\r\n * The Boolean \"or\" function.\r\n * @extends BooleanConnective\r\n */\r\nclass BooleanOr extends BooleanConnective {\r\n    constructor(arity = 2) {\r\n        super(arity);\r\n    }\r\n\r\n    getBooleanValue(false_values = [], true_values = [], false_positions = [], true_positions = []) {\r\n        if (true_values.length === 0) {\r\n            return new NaryConjunctiveVerdict(false, false_values, false_positions);\r\n        }\r\n        return new NaryDisjunctiveVerdict(true, true_values, true_positions);\r\n    }\r\n\r\n    toString() {\r\n        return \"Or\";\r\n    }\r\n}\r\n\r\n/**\r\n * The Boolean \"not\" function.\r\n * @extends AtomicFunction\r\n */\r\nclass BooleanNot extends AtomicFunction {\r\n    constructor() {\r\n        super(1);\r\n    }\r\n\r\n    getValue() {\r\n        if (typeof(arguments[0]) !== \"boolean\") {\r\n            throw \"Invalid argument type\";\r\n        }\r\n        return !arguments[0];\r\n    }\r\n\r\n    toString() {\r\n        return \"Not\";\r\n    }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { BooleanAnd, BooleanNot, BooleanOr, NaryConjunctiveVerdict, NaryDisjunctiveVerdict };","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n// Local imports\r\nimport { All, Nothing, Unknown } from \"./designator.mjs\";\r\nimport { ReturnValue } from \"./function.mjs\";\r\nimport { map_contains, map_get, map_put, same_object, set_contains } from \"./util.mjs\";\r\n\r\n/**\r\n * Manages the nodes of a designation and-or graph.\r\n * @param arguments An optional stack corresponding to the tracer's context.\r\n */\r\nclass Tracer {\r\n    constructor() {\r\n        /**\r\n         * A map keeping trace of which designated objects already have nodes.\r\n         */\r\n        this.nodes = new Map();\r\n\r\n        /**\r\n         * The context in which the tracer operates (a stack).\r\n         */\r\n        this.tracerContext = [];\r\n        if (arguments.length > 0) {\r\n            this.tracerContext = arguments;\r\n        }\r\n\r\n        /**\r\n         * Whether to simplify the trees\r\n         */\r\n        this.simplify = true;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the trees produced by the tracer should be simplified.\r\n     * @param b {boolean} Set to true to simplify trees, false otherwise\r\n     */\r\n    setSimplify(b) {\r\n        this.simplify = b;\r\n    }\r\n\r\n    /**\r\n     * Gets a new instance of an object node.\r\n     * @param dob The designated object that will be contained inside the node\r\n     * @return The object node. If an object node already exists for this\r\n     * designated object, it is reused. Otherwise, a new object node is created.\r\n     */\r\n    getObjectNode(d, o) {\r\n        if (d instanceof DesignatedObject) {\r\n            var dob = d;\r\n        } else {\r\n            var dob = new DesignatedObject(d, o);\r\n        }\r\n        if (map_contains(this.nodes, dob)) {\r\n            return map_get(this.nodes, dob);\r\n        }\r\n        var on = new ObjectNode(dob);\r\n        map_put(this.nodes, dob, on);\r\n        return on;\r\n    }\r\n\r\n    /**\r\n     * Gets a new instance of an \"and\" node.\r\n     * @return A new \"and\" node\r\n     */\r\n    getAndNode() {\r\n        return new AndNode();\r\n    }\r\n\r\n    /**\r\n     * Gets a new instance of an \"or\" node.\r\n     * @return A new \"or\" node\r\n     */\r\n    getOrNode() {\r\n        return new OrNode();\r\n    }\r\n\r\n    /**\r\n     * Gets a new instance of an \"unknown\" node.\r\n     * @return A new \"unknown\" node\r\n     */\r\n    getUnknownNode() {\r\n        return new UnknownNode();\r\n    }\r\n\r\n    /**\r\n     * Gets an instance of a sub-tracer from this tracer.\r\n     * @param {Object} o An object to append at the end of the current\r\n     * tracer's context\r\n     */\r\n    getSubTracer(o) {\r\n        var con = [];\r\n        con.push(...this.tracerContext);\r\n        con.push(o);\r\n        return new Tracer(...con);\r\n    }\r\n\r\n    getTree(q, d, o) {\r\n        var visited = [];\r\n        var tn = this.getObjectNode(d, o);\r\n        this.getChildren(q, tn, visited);\r\n        return tn;\r\n    }\r\n\r\n    getChildren(q, root, visited) {\r\n        if (set_contains(visited, root)) {\r\n            // This node has already been expanded\r\n            return;\r\n        }\r\n        visited.push(root);\r\n        if (!(root instanceof ObjectNode)) {\r\n            // Nothing to expand\r\n            return;\r\n        }\r\n        var dob = root.getDesignatedObject();\r\n        var o = dob.getObject();\r\n        var d = dob.getDesignator();\r\n        if (d instanceof All || d instanceof Nothing || d instanceof Unknown) {\r\n            // Trivial designator: nothing to expand\r\n            return;\r\n        }\r\n        if (typeof o.query == \"function\") // Object is queryable\r\n        {\r\n            // Send the query and create nodes from its result\r\n            var leaves = o.query(q, d, root, this);\r\n            for (var i = 0; i < leaves.length; i++) {\r\n                this.getChildren(q, leaves[i], visited);\r\n            }\r\n        } else {\r\n            // Query is non-trivial, and object is not trackable: nothing to do\r\n            //var n = this.getObjectNode(Unknown.instance, o);\r\n            //root.addChild(n);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Abstract object representing a generic node in an and-or lineage graph.\r\n */\r\nclass TraceabilityNode {\r\n    /**\r\n     * A counter for traceability node IDs.\r\n     */\r\n    static TN_ID_COUNTER = 0;\r\n\r\n    constructor() {\r\n        /**\r\n         * The node's unique ID\r\n         */\r\n        this.id = TraceabilityNode.TN_ID_COUNTER++;\r\n\r\n        /**\r\n         * The node's children\r\n         */\r\n        this.children = [];\r\n    }\r\n\r\n    /**\r\n     * Gets the node'is unique ID.\r\n     * @return The node's ID\r\n     */\r\n    getId() {\r\n        return this.id;\r\n    }\r\n\r\n    /**\r\n     * Adds a child to the node.\r\n     * @return The node to add\r\n     */\r\n    addChild(n) {\r\n        if (n == this) {\r\n            return;\r\n        }\r\n        this.children.push(n);\r\n    }\r\n\r\n    /**\r\n     * Gets the children of this node.\r\n     * @return The list of children\r\n     */\r\n    getChildren() {\r\n        return this.children;\r\n    }\r\n}\r\n\r\n/**\r\n * An \"and\" node.\r\n * @extends TraceabilityNode\r\n */\r\nclass AndNode extends TraceabilityNode {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    toString() {\r\n        var indent = \"\";\r\n        if (arguments.length == 1) {\r\n            indent = arguments[0];\r\n        }\r\n        var s = \"\";\r\n        s += indent + \"^\" + \"\\n\";\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            s += indent + this.children[i].toString(indent + \" \");\r\n        }\r\n        return s;\r\n    }\r\n\r\n    addChild(n) {\r\n        if (n instanceof AndNode) {\r\n            for (var i = 0; i < n.children.length; i++) {\r\n                this.children.push(n.children[i]);\r\n            }\r\n        } else {\r\n            this.children.push(n);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * An \"or\" node.\r\n * @extends TraceabilityNode\r\n */\r\nclass OrNode extends TraceabilityNode {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    toString() {\r\n        var indent = \"\";\r\n        if (arguments.length == 1) {\r\n            indent = arguments[0];\r\n        }\r\n        var s = \"\";\r\n        s += indent + \"v\" + \"\\n\";\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            s += indent + this.children[i].toString(indent + \" \");\r\n        }\r\n        return s;\r\n    }\r\n\r\n    addChild(n) {\r\n        if (n instanceof OrNode) {\r\n            for (var i = 0; i < n.children.length; i++) {\r\n                this.children.push(n.children[i]);\r\n            }\r\n        } else {\r\n            this.children.push(n);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * An \"unknown\" node.\r\n * @extends TraceabilityNode\r\n */\r\nclass UnknownNode extends TraceabilityNode {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    toString() {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/**\r\n * An \"object\" node.\r\n * @extends TraceabilityNode\r\n */\r\nclass ObjectNode extends TraceabilityNode {\r\n    /**\r\n     * Creates a new object node.\r\n     * @param {Designator|DesignatedObject} d The designator\r\n     * @param {Object} o The object that is designated\r\n     */\r\n    constructor(d, o) {\r\n        super();\r\n        if (d instanceof DesignatedObject) {\r\n            this.designatedObject = d;\r\n        } else {\r\n            this.designatedObject = new DesignatedObject(d, o);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the designated object contained inside this node.\r\n     */\r\n    getDesignatedObject() {\r\n        return this.designatedObject;\r\n    }\r\n\r\n    toString() {\r\n        return this.designatedObject.toString();\r\n    }\r\n}\r\n\r\n/**\r\n * Association between a designator, and object and an optional context.\r\n */\r\nclass DesignatedObject {\r\n    /**\r\n     * Creates a new designated object\r\n     * @param designator The part of the object that is designated\r\n     * @param object The object that is designated\r\n     * @param context The object's context\r\n     */\r\n    constructor(designator, object, context) {\r\n        /**\r\n         * The part of the object that is designated.\r\n         */\r\n        this.designator = designator;\r\n\r\n        /**\r\n         * The object that is designated.\r\n         */\r\n        this.object = object;\r\n\r\n        /**\r\n         * The object's context.\r\n         */\r\n        if (arguments.length >= 3) {\r\n            this.context = context;\r\n        } else {\r\n            this.context = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the designator associated to an object.\r\n     * @return The designator\r\n     */\r\n    getDesignator() {\r\n        return this.designator;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the object that is being designated.\r\n     * @return The object\r\n     */\r\n    getObject() {\r\n        return this.object;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the object's context.\r\n     * @return The context\r\n     */\r\n    getContext() {\r\n        return this.context;\r\n    }\r\n\r\n    equals(cdo) {\r\n        if (cdo == null || !(cdo instanceof DesignatedObject)) {\r\n            return false;\r\n        }\r\n        return ((this.object == null && cdo.object == null) || (this.object != null && same_object(this.object, cdo.object))) &&\r\n            (this.designator.equals(cdo.designator) && this.sameContext(cdo));\r\n    }\r\n\r\n    /**\r\n     * Checks if two designated objects have the same context.\r\n     * @param cdo The other designated object\r\n     * @return <tt>true</tt> if the two objects have the same context,\r\n     * <tt>false</tt> otherwise\r\n     */\r\n    sameContext(cdo) {\r\n        if (this.context.length != cdo.context.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < this.context.length; i++) {\r\n            if (this.context[i] != cdo.context[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    toString() {\r\n        return this.designator.toString() + \" of \" + this.object.toString();\r\n    }\r\n}\r\n\r\n/**\r\n * Front-end to explain the result of a calculation. This class provides a\r\n * static method called <tt>explain</tt> that can be used to produce a\r\n * lineage DAG from a {@link Value} returned by a function.\r\n */\r\nclass Explainer {\r\n    constructor() {\r\n        // Nothing to do\r\n    }\r\n\r\n    /**\r\n     * Explains the result of a calculation produced by an\r\n     * {@link AbstractFunction}.\r\n     * @param v {Value} The value to explain\r\n     * @param simplify Set to <tt>true</tt> to produce a simplified DAG\r\n     * (default), <tt>false</tt> to get a full DAG\r\n     */\r\n    static explain(v, simplify = true) {\r\n        var tracer = new Tracer();\r\n        tracer.setSimplify(simplify);\r\n        return tracer.getTree(null, ReturnValue.instance, v);\r\n    }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { Tracer, AndNode, DesignatedObject, Explainer, ObjectNode, OrNode, UnknownNode };\r\n\r\n// :wrap=soft:tabSize=2:indentWidth=2:","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n// Local imports\r\nimport { AtomicFunction } from \"./atomic-function.mjs\";\r\n//import { Value } from \"./value.mjs\";\r\n\r\n/**\r\n * Function that checks the equality between two objects. Two objects o1 and o2\r\n * are equal if one of these conditions hold:\r\n * <ul>\r\n * <li>they are both null</li>\r\n * <li>they are both non-null and:\r\n * <ol>\r\n *   <li>they represent the same numeric value, or</li>\r\n *   <li>they are the same string</li>\r\n * </ol></li>\r\n * </ul>\r\n * @extends AtomicFunction\r\n */\r\nclass IsEqualTo extends AtomicFunction {\r\n    constructor() {\r\n        super(2);\r\n    }\r\n\r\n    getValue() {\r\n        var o1 = arguments[0];\r\n        var o2 = arguments[1];\r\n        if (o1 == null && o2 == null) {\r\n            return true;\r\n        }\r\n        if ((o1 == null && o2 != null) || (o1 != null && o2 == null)) {\r\n            return false;\r\n        }\r\n        if (typeof(o1) === \"number\" && typeof(o2) === \"number\") {\r\n            return o1 === o2;\r\n        }\r\n        if (typeof(o1) === \"string\" && typeof(o2) === \"string\") {\r\n            return o1 === o2;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Function that adds numbers.\r\n * @extends AtomicFunction\r\n */\r\nclass Addition extends AtomicFunction {\r\n    constructor(arity = 2) {\r\n        super(arity);\r\n    }\r\n\r\n    getValue() {\r\n        var sum = 0;\r\n        for (var i = 0; i < this.arity; i++) {\r\n            var o = arguments[i];\r\n            if (typeof(o) !== \"number\") {\r\n                throw \"Invalid argument type\";\r\n            }\r\n            sum += o;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    toString() {\r\n        return \"Addition\";\r\n    }\r\n}\r\n/**\r\n * Function that substracts numbers.\r\n * @extends AtomicFunction\r\n */\r\nclass Subtraction extends AtomicFunction {\r\n    constructor(arity = 3) {\r\n        super(arity);\r\n    }\r\n\r\n    getValue() {\r\n        var sub = arguments[0];\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            var o = arguments[i];\r\n            if (typeof(o) !== \"number\") {\r\n                throw \"Invalid argument type\";\r\n            }\r\n            sub -= o\r\n        }\r\n        return sub;\r\n    }\r\n\r\n    toString() {\r\n        return \"Subtraction\";\r\n    }\r\n}\r\n/**\r\n * Function that multiplies numbers.\r\n * @extends AtomicFunction\r\n */\r\nclass Multiplication extends AtomicFunction {\r\n    constructor(arity = 5) {\r\n        super(arity);\r\n    }\r\n    compute() {\r\n        if (arguments.length !== this.arity) {\r\n            throw \"Invalid number of arguments\";\r\n        }\r\n        var zero_values = [];\r\n        var zero_positions = []\r\n        var result = 1\r\n        for (var i = 0; i < this.arity; i++) {\r\n            var o = arguments[i].getValue();\r\n            if (typeof(o) !== \"number\") {\r\n                throw \"Invalid argument type\";\r\n            }\r\n            if (o === 0) {\r\n                zero_values.push(arguments[i])\r\n                zero_positions.push(i)\r\n            } else {\r\n                result *= o;\r\n            }\r\n        }\r\n        return this.getZeroValue(zero_values, zero_positions, result);\r\n    }\r\n\r\n    getZeroValue(zero_values = [], zero_positions = [], result = null) {\r\n        if (zero_values.length === 0) {\r\n            return result;\r\n        } else {\r\n            return parseFloat(zero_values);\r\n        }\r\n    }\r\n    toString() {\r\n        return \"Multiplication\";\r\n    }\r\n}\r\n/**\r\n * Function that divides numbers.\r\n * @extends AtomicFunction\r\n */\r\nclass Division extends AtomicFunction {\r\n    constructor(arity = 4) {\r\n        super(arity);\r\n    }\r\n\r\n    getValue() {\r\n        var div = arguments[0];\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            var o = arguments[i];\r\n            if (typeof(o) !== \"number\") {\r\n                throw \"Invalid argument type\";\r\n            }\r\n            div /= o\r\n        }\r\n        return div;\r\n    }\r\n\r\n    toString() {\r\n        return \"Division\";\r\n    }\r\n}\r\n\r\n/**\r\n * Function that compares two numbers and returns true if the first\r\n * is greater than the second.\r\n * @extends AtomicFunction\r\n */\r\nclass GreaterThan extends AtomicFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(2);\r\n    }\r\n\r\n    getValue() {\r\n        var o1 = arguments[0];\r\n        var o2 = arguments[1];\r\n        if (typeof(o1) !== \"number\" || typeof(o2) !== \"number\") {\r\n            throw new Error(`Invalid argument type. GreaterThan expects both arguments to be numbers, but the following were received instead: ${typeof o1} (${JSON.stringify(o1)}) and ${typeof o2} (${JSON.stringify(o2)}).`);\r\n        }\r\n        return o1 > o2;\r\n    }\r\n\r\n    toString() {\r\n        return \"&gt;\";\r\n    }\r\n}\r\n/**\r\n * Function that compares two numbers and returns true if the first\r\n * is Lesser than the second.\r\n * @extends AtomicFunction\r\n */\r\nclass LesserThan extends AtomicFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(2);\r\n    }\r\n\r\n    getValue() {\r\n        var o1 = arguments[0];\r\n        var o2 = arguments[1];\r\n        if (typeof(o1) !== \"number\" || typeof(o2) !== \"number\") {\r\n            throw new Error(`Invalid argument type. LesserThan expects both arguments to be numbers, but the following were received instead: ${typeof o1} (${JSON.stringify(o1)}) and ${typeof o2} (${JSON.stringify(o2)}).`);\r\n        }\r\n        return o1 < o2;\r\n    }\r\n\r\n    toString() {\r\n        return \"&lt;\";\r\n    }\r\n}\r\n\r\n/**\r\n * Function that compares two numbers and returns true if the first\r\n * is greater than or equal to the second.\r\n * @extends AtomicFunction\r\n */\r\nclass GreaterOrEqual extends AtomicFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(2);\r\n    }\r\n\r\n    getValue() {\r\n        var o1 = arguments[0];\r\n        var o2 = arguments[1];\r\n        if (typeof(o1) !== \"number\" || typeof(o2) !== \"number\") {\r\n            throw new Error(`Invalid argument type. GreaterOrEqual expects both arguments to be numbers, but the following were received instead: ${typeof o1} (${JSON.stringify(o1)}) and ${typeof o2} (${JSON.stringify(o2)}).`);\r\n        }\r\n        return o1 >= o2;\r\n    }\r\n\r\n    toString() {\r\n        return \"&ge;\";\r\n    }\r\n}\r\n/**\r\n * Function that compares two numbers and returns true if the first\r\n * is Lesser than or equal to the second.\r\n * @extends AtomicFunction\r\n */\r\nclass LesserOrEqual extends AtomicFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(2);\r\n    }\r\n\r\n    getValue() {\r\n        var o1 = arguments[0];\r\n        var o2 = arguments[1];\r\n        if (typeof(o1) !== \"number\" || typeof(o2) !== \"number\") {\r\n            throw new Error(`Invalid argument type. LesserOrEqual expects both arguments to be numbers, but the following were received instead: ${typeof o1} (${JSON.stringify(o1)}) and ${typeof o2} (${JSON.stringify(o2)}).`);\r\n        }\r\n        return o1 <= o2;\r\n    }\r\n\r\n    toString() {\r\n        return \"&le;\";\r\n    }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { Addition, Subtraction, Division, GreaterOrEqual, LesserOrEqual, GreaterThan, LesserThan, Multiplication, IsEqualTo };\r\n\r\n// :wrap=soft:tabSize=2:indentWidth=2:","/*\r\n  A lineage library for DOM nodes\r\n  MIT License\r\n\r\n  Copyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n  Eckinox Média and Université du Québec à Chicoutimi\r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n  of this software and associated documentation files (the \"Software\"), to deal\r\n  in the Software without restriction, including without limitation the rights\r\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n  copies of the Software, and to permit persons to whom the Software is\r\n  furnished to do so, subject to the following conditions:\r\n\r\n  The above copyright notice and this permission notice shall be included in all\r\n  copies or substantial portions of the Software.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n  SOFTWARE.\r\n*/\r\n\r\nimport { AtomicFunction, AtomicFunctionReturnValue } from \"./atomic-function.mjs\";\r\nimport { CompoundDesignator, Designator } from \"./designator.mjs\";\r\nimport { Value } from \"./value.mjs\";\r\n\r\n/**\r\n *\r\n * @extends AtomicFunction\r\n */\r\nclass Enumerate extends AtomicFunction {\r\n  constructor() {\r\n    super(1);\r\n  }\r\n\r\n  compute() {\r\n    var list = arguments[0].getValue();\r\n    if (!Array.isArray(list)) {\r\n      throw \"Invalid argument type\";\r\n    }\r\n    var val_list = [];\r\n    var out_list = [];\r\n    for (var i = 0; i < list.length; i++) {\r\n      val_list.push(Value.lift(list[i]));\r\n    }\r\n    for (let i = 0; i < list.length; i++) {\r\n      out_list.push(new EnumeratedValue(i, val_list));\r\n    }\r\n    return new AtomicFunctionReturnValue(this, out_list, ...arguments);\r\n  }\r\n\r\n  getValue() {\r\n    return null;\r\n  }\r\n}\r\n/**\r\n *\r\n * @extends Value\r\n */\r\nclass EnumeratedValue extends Value {\r\n  constructor(index, input_list) {\r\n    super();\r\n    this.index = index;\r\n    this.inputList = input_list;\r\n  }\r\n\r\n  query(q, d, root, factory) {\r\n    var leaves = [];\r\n    var new_d = CompoundDesignator.create(d.tail(), new NthItem(this.index));\r\n    var n_it = factory.getObjectNode(new_d, this.inputList);\r\n    root.addChild(n_it);\r\n    var v = this.inputList[this.index];\r\n    var sub_leaves = v.query(q, new_d, n_it, factory);\r\n    leaves.push(...sub_leaves);\r\n    return leaves;\r\n  }\r\n\r\n  getValue() {\r\n    return this.inputList[this.index].getValue();\r\n  }\r\n\r\n  toString() {\r\n    return this.inputList[this.index].getValue().toString();\r\n  }\r\n\r\n  equals(o) {\r\n    if (o == null || !(o instanceof EnumeratedValue)) {\r\n      return false;\r\n    }\r\n    return this.index === o.index && this.inputList === o.inputList;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @extends Designator\r\n */\r\nclass NthItem extends Designator {\r\n  constructor(index) {\r\n    super();\r\n    this.index = index;\r\n  }\r\n\r\n  appliesTo(o) {\r\n    return Array.isArray(o);\r\n  }\r\n\r\n  getIndex() {\r\n    return this.index;\r\n  }\r\n\r\n  toString() {\r\n    return \"Element #\" + (this.index + 1);\r\n  }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { Enumerate, EnumeratedValue, NthItem };\r\n\r\n// :wrap=soft:tabSize=2:indentWidth=2:\r\n","/*\r\n  A lineage library for DOM nodes\r\n  MIT License\r\n\r\n  Copyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n  Eckinox Média and Université du Québec à Chicoutimi\r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n  of this software and associated documentation files (the \"Software\"), to deal\r\n  in the Software without restriction, including without limitation the rights\r\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n  copies of the Software, and to permit persons to whom the Software is\r\n  furnished to do so, subject to the following conditions:\r\n\r\n  The above copyright notice and this permission notice shall be included in all\r\n  copies or substantial portions of the Software.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n  SOFTWARE.\r\n*/\r\n\r\n/**\r\n * Imports\r\n */\r\nimport { CompoundDesignator, Designator } from \"./designator.mjs\";\r\nimport { AbstractFunction, InputArgument, ReturnValue } from \"./function.mjs\";\r\nimport { Value } from \"./value.mjs\";\r\nimport { ObjectNode } from \"./tracer.mjs\";\r\n\r\n/**\r\n * A function that is defined as the composition of other functions.\r\n * @extends AtomicFunction\r\n */\r\nclass ComposedFunction extends AbstractFunction {\r\n  /**\r\n     * Creates a new instance of the function.\r\n     * @param operator The top-level operator this function composes\r\n     * @param operands The operands of this function. These operands\r\n     * can themselves be other functions.\r\n     */\r\n  constructor(operator, ...operands) {\r\n    super();\r\n    this.members = [operator, ...operands];\r\n    this.operator = operator;\r\n    this.operands = [];\r\n    for (var i = 0; i < operands.length; i++) {\r\n      if (typeof (operands[i]) === \"string\") {\r\n        var op = operands[i];\r\n        if (op.startsWith(\"@\")) {\r\n          var index = op.substring(1).trim();\r\n          this.operands.push(new Argument(index));\r\n          continue;\r\n        }\r\n        if (op.startsWith(\"$\")) {\r\n          this.operands.push(new NamedArgument(this, op.substring(1).trim()));\r\n          continue;\r\n        }\r\n      } else {\r\n        this.operands.push(AbstractFunction.lift(operands[i]));\r\n      }\r\n    }\r\n  }\r\n\r\n  setName(name) {\r\n    this.name = name;\r\n    return this;\r\n  }\r\n\r\n  set(variable, value) {\r\n    var cf = new ComposedFunction(this.operator);\r\n    var operands = [];\r\n    for (var i = 0; i < this.operands.length; i++) {\r\n      operands.push(this.operands[i].set(variable, value));\r\n    }\r\n    cf.operands = operands;\r\n    return cf;\r\n  }\r\n\r\n  getArity() {\r\n    var args = [];\r\n    this.getArguments(args);\r\n    return args.length;\r\n  }\r\n\r\n  getArguments(args) {\r\n    for (var i = 0; i < this.operands.length; i++) {\r\n      var f = this.operands[i];\r\n      if (f instanceof ComposedFunction) {\r\n        f.getArguments(args);\r\n      }\r\n      if (f instanceof Argument) {\r\n        args.push(f.index);\r\n      }\r\n      if (f instanceof NamedArgument) {\r\n        args.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  evaluate() {\r\n    var values = [];\r\n    for (var i = 0; i < this.operands.length; i++) {\r\n      values.push(this.operands[i].evaluate(...arguments));\r\n    }\r\n    var v = this.operator.evaluate(...values);\r\n    return new ComposedFunctionValue(this, v, ...values);\r\n  }\r\n\r\n  toString() {\r\n    if (this.name != null) {\r\n      return this.name;\r\n    }\r\n    return \"F(\" + this.operator.toString() + \")\";\r\n  }\r\n}\r\n\r\n/**\r\n * Value returned by a composed function.\r\n * @extends Value\r\n */\r\nclass ComposedFunctionValue extends Value {\r\n  constructor(f, return_value, ...values) {\r\n    super();\r\n    this.referenceFunction = f;\r\n    this.inputValues = values;\r\n    this.returnValue = return_value;\r\n  }\r\n\r\n  query(q, d, root, factory) {\r\n    var leaves = [];\r\n    if (!(d.head() instanceof ReturnValue)) {\r\n      return leaves;\r\n    }\r\n    var new_d = CompoundDesignator.create(ReturnValue.instance, d.tail());\r\n    var sub_root = factory.getObjectNode(new_d, this.referenceFunction.operator);\r\n    var sub_leaves = this.returnValue.query(q, d, sub_root, factory);\r\n    var new_sub_leaves = [];\r\n    for (var i = 0; i < sub_leaves.length; i++) {\r\n      var sub_leaf = sub_leaves[i];\r\n      if (sub_leaf instanceof ObjectNode) {\r\n        var o_sl = sub_leaf;\r\n        var des = o_sl.getDesignatedObject().getDesignator();\r\n        if (des.head() instanceof InputArgument) {\r\n          var fia = des.head();\r\n          var index = fia.getIndex();\r\n          new_sub_leaves.push(...this.inputValues[index].query(q, new_d, sub_leaf, factory));\r\n          continue;\r\n        }\r\n      }\r\n      new_sub_leaves.push(sub_leaf);\r\n    }\r\n    leaves.push(...new_sub_leaves);\r\n    root.addChild(sub_root);\r\n    return leaves;\r\n  }\r\n\r\n  getValue() {\r\n    return this.returnValue.getValue();\r\n  }\r\n\r\n  toString() {\r\n    return this.returnValue.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * A named argument.\r\n * @extends AbstractFunction\r\n */\r\nclass NamedArgument extends AbstractFunction {\r\n  constructor(f, name) {\r\n    super();\r\n    this.name = name;\r\n    this.value = null;\r\n    this.referenceFunction = f;\r\n    this.isSet = false;\r\n  }\r\n\r\n  /* @Override */\r\n  set(name, value) {\r\n    if (this.name === name || (\"$\" + this.name) === name) {\r\n      this.value = Value.lift(value);\r\n    }\r\n    this.isSet = true;\r\n    return this;\r\n  }\r\n\r\n  evaluate() {\r\n    if (this.isSet) {\r\n      return new NamedArgumentValue(this.name, this.value);\r\n    }\r\n    for (var i = 0; i < this.referenceFunction.operands.length; i++) {\r\n      if (this.referenceFunction.operands[i] instanceof NamedArgument) {\r\n        if (this.name === this.referenceFunction.operands[i].getName()) {\r\n          return new NamedArgumentValue(this.name, Value.lift(arguments[i]));\r\n        }\r\n      }\r\n    }\r\n    return new NamedArgumentValue(this.name, this.value);\r\n  }\r\n\r\n  toString() {\r\n    return \"$\" + this.name;\r\n  }\r\n\r\n  getArity() {\r\n    return 0;\r\n  }\r\n\r\n  getName() {\r\n    return this.name;\r\n  }\r\n}\r\n/**\r\n * A named argument value.\r\n * @extends Value\r\n */\r\nclass NamedArgumentValue extends Value {\r\n  constructor(name, v) {\r\n    super();\r\n    this.value = v;\r\n    this.name = name;\r\n  }\r\n\r\n  query(q, d, root, factory) {\r\n    var leaves = [];\r\n    var new_d = CompoundDesignator.create(d.tail(), new FunctionNamedArgument(this.name, this.value));\r\n    var n = factory.getObjectNode(new_d, this.value);\r\n    var sub_leaves = this.value.query(q, d, n, factory);\r\n    leaves.push(...sub_leaves);\r\n    root.addChild(n);\r\n    return leaves;\r\n  }\r\n\r\n  getValue() {\r\n    return this.value.getValue();\r\n  }\r\n\r\n  toString() {\r\n    return this.value.getValue().toString();\r\n  }\r\n}\r\n\r\n/**\r\n * Designates the argument passed to a function by referring to it\r\n * by its name.\r\n * @extends Designator\r\n */\r\nclass FunctionNamedArgument extends Designator {\r\n  /**\r\n     * Creates a new named argument.\r\n     * @param name The name of the argument\r\n     * @param v The value of the argument\r\n     */\r\n  constructor(name, v) {\r\n    super();\r\n    this.name = name;\r\n    this.value = v;\r\n  }\r\n\r\n  appliesTo(o) {\r\n    return o instanceof Function;\r\n  }\r\n\r\n  head() {\r\n    return this;\r\n  }\r\n\r\n  tail() {\r\n    return null;\r\n  }\r\n\r\n  toString() {\r\n    return \"$\" + this.name + \"/\" + this.value;\r\n  }\r\n}\r\n\r\n/**\r\n * A function that acts as an argument to a composed function.\r\n * @extends AbstractFunction\r\n */\r\nclass Argument extends AbstractFunction {\r\n  /**\r\n     * Creates a new instance of the function.\r\n     * @param index The position of the argument in the composed\r\n     * function\r\n     */\r\n  constructor(index) {\r\n    super();\r\n    this.index = index;\r\n  }\r\n\r\n  /* @Override */\r\n  set(name, value) {\r\n    return this;\r\n  }\r\n\r\n  evaluate() {\r\n    var v = Value.lift(arguments[this.index]);\r\n    return new ArgumentValue(this, v, this.index);\r\n  }\r\n\r\n  toString() {\r\n    return \"@\" + this.index;\r\n  }\r\n}\r\n\r\n/**\r\n * A value that corresponds to an argument passed to a composed function.\r\n * @extends Value\r\n */\r\nclass ArgumentValue extends Value {\r\n  /**\r\n     * Creates a new argument value.\r\n     * @param f The function to which this value is an argument\r\n     * @param v The value\r\n     * @param index The position of the value in the arguments of the\r\n     * function\r\n     */\r\n  constructor(f, v, index) {\r\n    super();\r\n    this.value = v;\r\n    this.index = index;\r\n    this.referenceFunction = f;\r\n  }\r\n\r\n  query(q, d, root, factory) {\r\n    var leaves = [];\r\n    var new_d = CompoundDesignator.create(d.tail(), new InputArgument(this.index, this.value));\r\n    var n = factory.getObjectNode(new_d, this.value);\r\n    var sub_leaves = this.value.query(q, d, n, factory);\r\n    leaves.push(...sub_leaves);\r\n    root.addChild(n);\r\n    return leaves;\r\n  }\r\n\r\n  getValue() {\r\n    return this.value.getValue();\r\n  }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport {\r\n  Argument,\r\n  ArgumentValue,\r\n  ComposedFunction,\r\n  ComposedFunctionValue,\r\n  FunctionNamedArgument,\r\n  NamedArgument,\r\n  NamedArgumentValue\r\n};\r\n","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n// Local imports\r\nimport { AndNode, Explainer, ObjectNode, OrNode } from \"./tracer.mjs\";\r\nimport { set_contains } from \"./util.mjs\";\r\n\r\nclass TestDriver {\r\n    constructor() {\r\n        this.conditions = [];\r\n        if (arguments.length > 0) {\r\n            this.conditions = arguments;\r\n        }\r\n        this.returnedValues = [];\r\n    }\r\n\r\n    /**\r\n     * Adds a condition to evaluate\r\n     */\r\n    add() {\r\n        this.conditions.push(...arguments);\r\n    }\r\n\r\n    evaluateAll(o) {\r\n        this.returnedValues = [];\r\n        for (var i = 0; i < this.conditions.length; i++) {\r\n            var v = this.conditions[i].evaluate(o);\r\n            this.returnedValues.push(v);\r\n        }\r\n    }\r\n\r\n    getResult() {\r\n        var verdicts = [];\r\n        for (var i = 0; i < this.conditions.length; i++) {\r\n            verdicts.push(new Verdict(this.returnedValues[i], this.conditions[i]));\r\n        }\r\n        return new TestResult(...verdicts);\r\n    }\r\n}\r\n\r\nclass TestCondition {\r\n    constructor(name, f) {\r\n        this.name = name;\r\n        this.function = f;\r\n    }\r\n\r\n    getName() {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * Evaluates a test condition on a web element.\r\n     * @param e The web element on which to evaluate the test condition\r\n     * @return {Verdict} The result of the evaluation of the condition\r\n     */\r\n    evaluate(e) {\r\n        return this.function.evaluate(e);\r\n    }\r\n}\r\n\r\nclass Verdict {\r\n    /**\r\n     * Creates a new verdict.\r\n     * @param v {Value} The return value of the test condition\r\n     * @param c {TestCondition} The test condition that was evaluated\r\n     */\r\n    constructor(v, c) {\r\n        this.value = v;\r\n        this.condition = c;\r\n    }\r\n\r\n    getCondition() {\r\n        return this.condition;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n\r\n    getResult() {\r\n        var o = this.value.getValue();\r\n        if (!o) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getWitness() {\r\n        var list = [];\r\n        var root = Explainer.explain(this.value);\r\n        Verdict.pick(root, list);\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * Non-deterministically picks a set of objects that explain the verdict.\r\n     * The method is recursive and works as follows:\r\n     * <ul>\r\n     * <li>If the current node is an And node, call pick on all its\r\n     * children</li>\r\n     * <li>If the current node is an Or node, call pick on one of its\r\n     * children</li>\r\n     * <li>If the current node is a leaf ObjectNode, add it to the list</li>\r\n     * <li>Otherwise, call pick on all children of the node</li>\r\n     * </ul>\r\n     * Non-determinism occurs because of the handling of the Or node. By\r\n     * construction, any set of elements produced by the method is one of the\r\n     * clauses of the tree when put in disjunctive normal form.\r\n     * @param n The current node\r\n     * @param list A list to which nodes are added\r\n     */\r\n    static pick(n, list, visited = []) {\r\n        if (set_contains(visited, n)) {\r\n            return;\r\n        }\r\n        visited.push(n);\r\n        if (n instanceof AndNode) {\r\n            for (var i = 0; i < n.getChildren().length; i++) {\r\n                Verdict.pick(n.getChildren()[i], list, visited);\r\n            }\r\n        } else if (n instanceof OrNode) {\r\n            var test = true;\r\n            while (test) {\r\n                Verdict.pick(n.getChildren()[i], list, visited);\r\n                test = false;\r\n            }\r\n            /*\r\n            for (let i = 0; i < n.getChildren().length; i++) {\r\n            \tVerdict.pick(n.getChildren()[i], list, visited);\r\n            \tbreak;\r\n            }\r\n            */\r\n        } else if (n instanceof ObjectNode) {\r\n            if (n.getChildren().length === 0) {\r\n                list.push(n.getDesignatedObject());\r\n            } else {\r\n                for (let i = 0; i < n.getChildren().length; i++) {\r\n                    Verdict.pick(n.getChildren()[i], list, visited);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass TestResult {\r\n    constructor() {\r\n        this.verdicts = arguments;\r\n    }\r\n\r\n    getVerdicts() {\r\n        return this.verdicts;\r\n    }\r\n\r\n    getResult() {\r\n        for (var i = 0; i < this.verdicts.length; i++) {\r\n            if (!this.verdicts[i].getResult()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { TestCondition, TestDriver, TestResult, Verdict };\r\n\r\n// :wrap=soft:tabSize=2:indentWidth=2:","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n/**\r\n * Imports\r\n */\r\nimport { AbstractFunction, ReturnValue } from \"./function.mjs\";\r\nimport { Value } from \"./value.mjs\";\r\nimport { Verdict } from \"./verdict.mjs\";\r\n\r\n/**\r\n * Base class for the implementation of the universal and existential\r\n * quantifiers.\r\n * @extends AbstractFunction\r\n */\r\nclass Quantifier extends AbstractFunction {\r\n    /**\r\n     * Creates a new instance of quantifier.\r\n     * @param index {integer|string}\r\n     * @param domain {AbstractFunction}\r\n     * @param phi {AbstractFunction}\r\n     */\r\n    constructor(index, domain, phi) {\r\n        super();\r\n        if (typeof(index) === \"number\") {\r\n            this.index = index;\r\n        } else {\r\n            this.variable = index;\r\n        }\r\n        this.domain = domain;\r\n        this.phi = phi;\r\n\r\n        this.members = [index, domain, phi]\r\n    }\r\n\r\n    getArity() {\r\n        return 1;\r\n    }\r\n\r\n    evaluate() {\r\n        if (arguments.length !== 1) {\r\n            throw \"Invalid number of arguments\";\r\n        }\r\n        var true_verdicts = [];\r\n        var false_verdicts = [];\r\n        var v_dom = this.domain.evaluate(...arguments);\r\n        var o_dom = v_dom.getValue();\r\n        if (!Array.isArray(o_dom)) {\r\n            throw \"Domain expression does not return a list\";\r\n        }\r\n        var domain = o_dom;\r\n        for (var i = 0; i < domain.length; i++) {\r\n            var x = Value.lift(domain[i]);\r\n            var cf = this.phi.set(this.variable, x);\r\n            var ret_val = cf.evaluate(...arguments);\r\n            var o_b = ret_val.getValue();\r\n            if (typeof(o_b) !== \"boolean\") {\r\n                throw \"Invalid argument type\";\r\n            }\r\n            var b = o_b;\r\n            if (b) {\r\n                true_verdicts.push({ value: x, verdict: ret_val });\r\n            } else {\r\n                false_verdicts.push({ value: x, verdict: ret_val });\r\n            }\r\n        }\r\n        return this.getQuantifierValue(false_verdicts, true_verdicts);\r\n    }\r\n\r\n    getQuantifierValue(false_verdicts, true_verdicts) {\r\n        return null; // To be overridden by descendants\r\n    }\r\n}\r\n\r\n/**\r\n * Common class to {@link QuantifierDisjunctiveVerdict} and\r\n * {@link QuantifierConjunctiveVerdict}.\r\n * @extends Value\r\n */\r\nclass QuantifierVerdict extends Value {\r\n    constructor(f, value, verdicts) {\r\n        super();\r\n        this.value = value;\r\n        this.verdicts = verdicts;\r\n        this.referenceFunction = f;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n}\r\n\r\n/**\r\n * Verdict returned by a quantifier and which depends on either of the input\r\n * values provided. This verdict is returned for a universal quantifier that\r\n * evaluates to false, and for an existential quantifier that evaluates to\r\n * true.\r\n * @extends QuantifierVerdict\r\n */\r\nclass QuantifierDisjunctiveVerdict extends QuantifierVerdict {\r\n    query(q, d, root, factory) {\r\n        var leaves = [];\r\n        var n = factory.getOrNode();\r\n        for (var i = 0; i < this.verdicts.length; i++) {\r\n            var vv = this.verdicts[i];\r\n            var v = vv.verdict;\r\n            var sub_factory = factory.getSubTracer(this.referenceFunction);\r\n            var sub_leaves = v.query(q, ReturnValue.instance, n, sub_factory);\r\n            leaves.push(...sub_leaves);\r\n        }\r\n        var tn = factory.getObjectNode(ReturnValue.instance, this.referenceFunction);\r\n        if (this.verdicts.length === 1) {\r\n            tn.addChild(n.getChildren()[0]);\r\n        } else {\r\n            tn.addChild(n);\r\n        }\r\n        root.addChild(tn);\r\n        return leaves;\r\n    }\r\n}\r\n\r\n/**\r\n * Verdict returned by a quantifier and which depends on all the input values\r\n * provided. This verdict is returned for a universal quantifier that evaluates\r\n * to true, and for an existential quantifier that evaluates to false.\r\n * @extends QuantifierVerdict\r\n */\r\nclass QuantifierConjunctiveVerdict extends QuantifierVerdict {\r\n    query(q, d, root, factory) {\r\n        var leaves = [];\r\n        var n = factory.getAndNode();\r\n        for (var i = 0; i < this.verdicts.length; i++) {\r\n            var vv = this.verdicts[i];\r\n            var v = vv.verdict;\r\n            var sub_factory = factory.getSubTracer(v);\r\n            var sub_leaves = v.query(q, ReturnValue.instance, n, sub_factory);\r\n            leaves.push(...sub_leaves);\r\n        }\r\n        var tn = factory.getObjectNode(ReturnValue.instance, this.referenceFunction);\r\n        if (this.verdicts.length === 1) {\r\n            tn.addChild(n.getChildren()[0]);\r\n        } else {\r\n            tn.addChild(n);\r\n        }\r\n        root.addChild(tn);\r\n        return leaves;\r\n    }\r\n}\r\n\r\n/**\r\n * Universal quantifier.\r\n * @extends Quantifier\r\n */\r\nclass UniversalQuantifier extends Quantifier {\r\n    getQuantifierValue(false_verdicts = [], true_verdicts = []) {\r\n        if (false_verdicts.length === 0) {\r\n            return new QuantifierConjunctiveVerdict(this, true, true_verdicts);\r\n        }\r\n        return new QuantifierDisjunctiveVerdict(this, false, false_verdicts);\r\n    }\r\n\r\n    toString() {\r\n        return \"ForAll\";\r\n    }\r\n\r\n    set(variable, value) {\r\n        return new UniversalQuantifier(this.variable, this.domain.set(variable, value), this.phi.set(variable, value));\r\n    }\r\n}\r\n\r\n/**\r\n * Existential quantifier.\r\n * @extends Quantifier\r\n */\r\nclass ExistentialQuantifier extends Quantifier {\r\n    getQuantifierValue(false_verdicts = [], true_verdicts = []) {\r\n        if (true_verdicts.length > 0) {\r\n            return new QuantifierDisjunctiveVerdict(this, true, true_verdicts);\r\n        }\r\n        return new QuantifierConjunctiveVerdict(this, false, false_verdicts);\r\n    }\r\n\r\n    toString() {\r\n        return \"Exists\";\r\n    }\r\n\r\n    set(variable, value) {\r\n        return new ExistentialQuantifier(this.variable, this.domain.set(variable, value), this.phi.set(variable, value));\r\n    }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { ExistentialQuantifier, Quantifier, QuantifierConjunctiveVerdict, QuantifierDisjunctiveVerdict, QuantifierVerdict, UniversalQuantifier };\r\n// :wrap=soft:tabSize=2:indentWidth=2:","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n/**\r\n * Imports\r\n */\r\nimport { CompoundDesignator, Designator } from \"./designator.mjs\";\r\nimport { AtomicFunction, AtomicFunctionReturnValue } from \"./atomic-function.mjs\";\r\nimport { Value } from \"./value.mjs\";\r\nimport { Enumerate, EnumeratedValue } from \"./enumerate.mjs\";\r\n\r\n/**\r\n *\r\n * @extends AtomicFunction\r\n */\r\nclass WebElementFunction extends AtomicFunction {\r\n    constructor(name) {\r\n        super(1);\r\n        this.name = name;\r\n    }\r\n\r\n    compute() {\r\n        var val = this.get(arguments[0].getValue());\r\n        return new ElementAttributeValue(this.name, arguments[0], val);\r\n    }\r\n\r\n    get(e) {\r\n            return null; // To be overridden by descendants\r\n        }\r\n        //this method help to get window object\r\n    getOwnerWindow(element) {\r\n        return element.ownerDocument.defaultView || element.ownerDocument.parentWindow;\r\n    }\r\n    getElementComputedStyle(element) {\r\n        const window = this.getOwnerWindow(element);\r\n        return window.getComputedStyle(element);\r\n    }\r\n}\r\n\r\n/**\r\n * Designator that points to the value of an attribute for some DOM node.\r\n * @extends Designator\r\n */\r\nclass ElementAttribute extends Designator {\r\n    /**\r\n     * Creates a ne instance of the designator.\r\n     * @param name {String} The name of the attribute\r\n     */\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n\r\n    toString() {\r\n        return this.name;\r\n    }\r\n}\r\n\r\n/**\r\n * The value of an attribute for some DOM node.\r\n * @extends Value\r\n */\r\nclass ElementAttributeValue extends Value {\r\n    /**\r\n     * Creates a new instance of the value.\r\n     * @param name {String} The name of the attribute in the DOM node\r\n     * @param input {Object|Value} The DOM node, or a value containing the\r\n     * DOM node\r\n     * @param v {Object|Value} The value of the attribute in the DOM node\r\n     */\r\n    constructor(name, input, v) {\r\n        super();\r\n        this.name = name;\r\n        this.input = Value.lift(input);\r\n        this.value = Value.lift(v);\r\n    }\r\n\r\n    getValue() {\r\n        return this.value.getValue();\r\n    }\r\n\r\n    toString() {\r\n        return this.value.getValue().toString();\r\n    }\r\n\r\n    query(q, d, root, factory) {\r\n        var leaves = [];\r\n        var new_d = CompoundDesignator.create(new ElementAttribute(this.name), d);\r\n        var n = factory.getObjectNode(new_d, this.input);\r\n        leaves.push(...this.input.query(q, new_d, n, factory));\r\n        root.addChild(n);\r\n        return leaves;\r\n    }\r\n}\r\n/**\r\n * value of css attribute\r\n * @extends WebElementFunction\r\n */\r\nclass CssPropertyFunction extends WebElementFunction {\r\n    constructor(name, returnType = null) {\r\n        if ([\"float\", \"int\", \"string\", null].indexOf(returnType) == -1) {\r\n            throw new Error(`CssPropertyFunction returnType expects one of the following values: \"float\", \"int\", \"string\", null. Received ${returnType} instead.`);\r\n        }\r\n\r\n        super(name);\r\n        this.returnType = returnType;\r\n    }\r\n\r\n    get(element) {\r\n        const style = this.getElementComputedStyle(element);\r\n        const value = style.getPropertyValue(this.name);\r\n\r\n        switch (this.returnType) {\r\n            case \"float\":\r\n                return parseFloat(value);\r\n\r\n            case \"int\":\r\n                return parseInt(value);\r\n\r\n            case \"string\":\r\n                return typeof value == \"string\" ? value : value.toString();\r\n        }\r\n\r\n        return value;\r\n    }\r\n}\r\n\r\n/**\r\n * value of a css attribute, but in case the value is undefined or does not meet certain criteria, retrieve the value of the parent element\r\n * @extends WebElementFunction\r\n */\r\nclass CssRecursivePropertyFunction extends WebElementFunction {\r\n    constructor(name, returnType = null, defaultValue = null) {\r\n        if ([\"float\", \"int\", \"string\", null].indexOf(returnType) == -1) {\r\n            throw new Error(`CssPropertyFunction returnType expects one of the following values: \"float\", \"int\", \"string\", null. Received ${returnType} instead.`);\r\n        }\r\n\r\n        super(name);\r\n        this.returnType = returnType;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    get(element) {\r\n        const value = this.getRecursive(element);\r\n\r\n        switch (this.returnType) {\r\n            case \"float\":\r\n                return parseFloat(value);\r\n\r\n            case \"int\":\r\n                return parseInt(value);\r\n\r\n            case \"string\":\r\n                return typeof value == \"string\" ? value : value.toString();\r\n        }\r\n\r\n        return value;   \r\n    }\r\n\r\n    getRecursive(element) {\r\n        if(!element) return this.defaultValue;\r\n\r\n        const style = this.getElementComputedStyle(element);\r\n        const value = style.getPropertyValue(this.name);\r\n\r\n        if(this.filter(value))\r\n            return this.getRecursive(element.parentElement);\r\n        else\r\n            return value;\r\n    }\r\n\r\n    //to be overridden by descendants to add additionnal filters depending on property\r\n    filter(value) {\r\n        return value == \"\";\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Function that extracts the width of a DOM node.\r\n * @extends WebElementFunction\r\n */\r\nclass DimensionWidth extends WebElementFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(\"width\");\r\n    }\r\n\r\n    get(element) {\r\n        return element.offsetWidth;\r\n    }\r\n}\r\n\r\n/**\r\n * Function that extracts the height of a DOM node.\r\n * @extends WebElementFunction\r\n */\r\nclass DimensionHeight extends WebElementFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(\"height\");\r\n    }\r\n\r\n    get(element) {\r\n        return element.offsetHeight;\r\n    }\r\n}\r\n/** \r\n * Function that extracts the offset from the top of the page of a DOM node.\r\n * @extends WebElementFunction\r\n */\r\nclass PageOffsetTop extends WebElementFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(\"PageOffsetTop\");\r\n    }\r\n\r\n    get(element) {\r\n        return this.getOffsetTop(element);\r\n    }\r\n\r\n    getOffsetTop(element) {\r\n        if(!element) return 0;\r\n        return this.getOffsetTop(element.offsetParent) + element.offsetTop;\r\n    }\r\n\r\n}\r\n/**\r\n * Function that extracts the offset from the left of the page of a DOM node.\r\n * @extends WebElementFunction\r\n */\r\nclass PageOffsetLeft extends WebElementFunction {\r\n    /**\r\n    * Creates a new instance of the function.\r\n    */\r\n    constructor() {\r\n        super(\"PageOffsetLeft\");\r\n    }\r\n\r\n    get(element) {\r\n        return this.getOffsetLeft(element);\r\n    }\r\n\r\n    getOffsetLeft(element) {\r\n        if(!element) return 0;\r\n        return this.getOffsetLeft(element.offsetParent) + element.offsetLeft;\r\n    }\r\n}\r\n/** \r\n * Function that extracts the offset from the top of the viewport of a DOM node.\r\n * @extends WebElementFunction\r\n */\r\nclass ClientOffsetTop extends WebElementFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(\"clientOffsetTop\");\r\n    }\r\n\r\n    get(element) {\r\n        return element.getBoundingClientRect().top;\r\n    }\r\n}\r\n/** \r\n * Function that extracts the offset from the left of the viewport of a DOM node.\r\n * @extends WebElementFunction\r\n */\r\nclass ClientOffsetLeft extends WebElementFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(\"clientOffsetLeft\");\r\n    }\r\n\r\n    get(element) {\r\n        return element.getBoundingClientRect().left;\r\n    }\r\n}\r\n/**\r\n * Function that extracts the font size.\r\n * @extends CssPropertyFunction\r\n */\r\nclass FontSize extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"font-size\")\r\n    }\r\n}\r\n/**\r\n * Function that extracts the font size.\r\n * @extends CssPropertyFunction\r\n */\r\nclass FontWeight extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"font-weight\")\r\n    }\r\n}\r\n/**\r\n * Function that extracts the font family\r\n * @extends CssPropertyFunction\r\n */\r\nclass FontFamily extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"font-family\")\r\n    }\r\n}\r\n/**\r\n * Function that extract the color of DOM element\r\n * @extends CssPropertyFunction\r\n */\r\nclass Color extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"color\")\r\n    }\r\n}\r\n/**\r\n * Function that extract the opacity\r\n * @extends CssPropertyFunction\r\n */\r\nclass Opacity extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"opacity\", \"float\");\r\n    }\r\n}\r\n/**\r\n * Function that extracts the background-color of a DOM.\r\n * @extends CssPropertyFunction\r\n */\r\nclass BackgroundColor extends CssRecursivePropertyFunction {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     */\r\n    constructor() {\r\n        super(\"background-color\", null, \"rgba(0, 0, 0, 0)\");\r\n    }\r\n\r\n    filter(value) {\r\n        return (value == \"\" || value == \"transparent\" || value == \"rgba(0, 0, 0, 0)\")\r\n    }\r\n}\r\n/**\r\n * Function that extract margin-top of a DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass MarginTop extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"margin-top\", \"float\")\r\n    }\r\n}\r\n/**\r\n * Function that extract margin-bottom of a DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass MarginBottom extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"margin-bottom\")\r\n    }\r\n}\r\n/**\r\n * Function that extract margin-left of a DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass MarginLeft extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"margin-left\")\r\n    }\r\n}\r\n/**\r\n * Function that extract margin-right of a DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass MarginRight extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"margin-right\")\r\n    }\r\n}\r\n/**\r\n * Function that extract paddig-top of a DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass PaddingTop extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"padding-top\")\r\n    }\r\n}\r\n/**\r\n * Function that extract paddig-bottom of a DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass PaddingBottom extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"padding-bottom\")\r\n    }\r\n}\r\n/**\r\n * Function that extract paddig-left of a DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass PaddingLeft extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"padding-left\")\r\n    }\r\n}\r\n/**\r\n * Function that extract paddig-right of a DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass PaddingRight extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"padding-right\")\r\n    }\r\n}\r\n/**\r\n * Function that extract border-width\r\n * @extends CssPropertyFunction\r\n */\r\nclass BorderWidth extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"border-width\")\r\n    }\r\n}\r\n/**\r\n * Function extract border-style of DOM element\r\n * @extends CssPropertyFunction\r\n */\r\nclass BorderStyle extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"border-style\")\r\n    }\r\n}\r\n/**\r\n * Function extrach border-color for DOM element\r\n * @extends CssPropertyFunction\r\n */\r\nclass BorderColor extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"border-color\")\r\n    }\r\n}\r\n/**\r\n * Function that extract border-radius\r\n * @extends CssPropertyFunction\r\n */\r\nclass BorderRadius extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"border-radius\")\r\n    }\r\n}\r\n/**\r\n * Function that extract display property of DOM element\r\n * @extends CssPropertyFunction\r\n */\r\nclass Display extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"display\")\r\n    }\r\n}\r\n/**\r\n * Function that extract visibility of DOM element\r\n * @extends CssPropertyFunction\r\n */\r\nclass Visibility extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"visibility\")\r\n    }\r\n}\r\n/**\r\n * Function that extract position of DOM element\r\n * @extends CssPropertyFunction\r\n */\r\nclass Position extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"position\")\r\n    }\r\n}\r\n/**\r\n * Function that extract flottant elemnt of DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass Float extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"float\")\r\n    }\r\n}\r\n/**\r\n * Function that extract flottant elemnt of DOM\r\n * @extends CssPropertyFunction\r\n */\r\nclass BackgroundImage extends CssPropertyFunction {\r\n    constructor() {\r\n        super(\"background-image\")\r\n    }\r\n}\r\n\r\n/**\r\n * Function that extract Z-index\r\n * @extends CssRecursivePropertyFunction\r\n */\r\nclass Zindex extends CssRecursivePropertyFunction {\r\n    constructor() {\r\n        super(\"z-index\", \"float\", 0);\r\n    }\r\n\r\n    filter(value) {\r\n        return value == \"\" || value == \"auto\";\r\n    }\r\n}\r\n\r\n/**\r\n * Designator that points to an element in a DOM tree based on\r\n * an XPath expression.\r\n * @extends Designator\r\n */\r\nclass Path extends Designator {\r\n    /**\r\n     * Creates a new instance of the designator.\r\n     * @param path {String} A string containing an XPath expression\r\n     */\r\n    constructor(path) {\r\n        super();\r\n        this.path = path;\r\n    }\r\n\r\n    toString() {\r\n        return this.path;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * The value of the path\r\n * @extends Value\r\n */\r\nclass PathValue extends Value {\r\n    constructor(p, root, value) {\r\n        super();\r\n        this.value = Value.lift(value);\r\n        this.root = Value.lift(root);\r\n        this.path = p;\r\n    }\r\n\r\n    query(q, d, root, factory) {\r\n        var leaves = [];\r\n        var new_d = CompoundDesignator.create(d.tail(), this.path);\r\n        var n = factory.getObjectNode(new_d, this.root);\r\n        leaves.push(...this.root.query(q, new_d, n, factory));\r\n        root.addChild(n);\r\n        return leaves;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value.getValue();\r\n    }\r\n\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n}\r\n\r\n/**\r\n * Function that produces a list of elements that match a given CSS selector.\r\n * @extends Enumerate\r\n */\r\nclass FindBySelector extends Enumerate {\r\n    /**\r\n     * Creates a new instance of the function.\r\n     * @param selector The CSS selector used to fetch elements\r\n     */\r\n    constructor(selector) {\r\n        super();\r\n        this.selector = selector;\r\n        this.members = [selector]\r\n    }\r\n\r\n    evaluate() {\r\n        if (arguments.length !== 1) {\r\n            throw \"Invalid number of arguments\";\r\n        }\r\n        var v = Value.lift(arguments[0]);\r\n        var root = v.getValue();\r\n        var elm_list = root.querySelectorAll(this.selector);\r\n        var val_list = [];\r\n        var out_list = [];\r\n        for (let i = 0; i < elm_list.length; i++) {\r\n            var path = FindBySelector.getPathTo(elm_list[i]);\r\n            var pv = new PathValue(new Path(path), root, elm_list[i]);\r\n            val_list.push(pv);\r\n        }\r\n        for (let i = 0; i < val_list.length; i++) {\r\n            out_list.push(new EnumeratedValue(i, val_list));\r\n        }\r\n        return new AtomicFunctionReturnValue(this, out_list, v);\r\n    }\r\n\r\n    static getPathTo(element) {\r\n        if (element.id !== \"\") { return \"id(\\\"\" + element.id + \"\\\")\"; }\r\n        if (element.tagName === \"BODY\") { return element.tagName; }\r\n\r\n        var ix = 0;\r\n        var siblings = element.parentNode.childNodes;\r\n        for (let i = 0; i < siblings.length; i++) {\r\n            var sibling = siblings[i];\r\n            if (sibling === element) { return this.getPathTo(element.parentNode) + \"/\" + element.tagName + \"[\" + (ix + 1) + \"]\"; }\r\n            if (sibling.nodeType === 1 && sibling.tagName === element.tagName) { ix++; }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Package exports\r\n */\r\nexport { BackgroundColor, BackgroundImage, BorderColor, BorderRadius, BorderStyle, BorderWidth, ClientOffsetTop, ClientOffsetLeft, CssPropertyFunction, CssRecursivePropertyFunction, Color, DimensionHeight, DimensionWidth, Display, ElementAttribute, ElementAttributeValue, FindBySelector, Float, FontFamily, FontSize, FontWeight, MarginTop, MarginBottom, MarginRight, MarginLeft, Opacity, PageOffsetTop, PageOffsetLeft, Path, PathValue, PaddingTop, PaddingBottom, PaddingRight, PaddingLeft, Position, Visibility, WebElementFunction, Zindex };\r\n\r\n// :wrap=soft:tabSize=2:indentWidth=2:","import * as DomPPClasses from \"../index.mjs\";\r\n\r\nclass Serialization\r\n{\r\n    constructor() \r\n    {\r\n    }\r\n\r\n    /**\r\n     * Build method deserialize(j), j is a JSON structure,\r\n     * this method will produce a Function object\r\n     */\r\n    deserialize(j) \r\n    {\r\n        const functionClass = DomPPClasses[j.name];\r\n        return functionClass.deserialize(this, j)\r\n    }\r\n\r\n    serialize(s)\r\n    {\r\n        return s.toJson()\r\n    }\r\n}\r\n\r\nexport { Serialization };","/*\r\n\tA lineage library for DOM nodes\r\n\tMIT License\r\n\r\n\tCopyright (c) 2020-2021 Amadou Ba, Sylvain Hallé\r\n\tEckinox Média and Université du Québec à Chicoutimi\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n*/\r\n\r\n/**\r\n * Imports\r\n */\r\n\r\n// DataTree for tree management\r\nimport dataTree from \"data-tree\";\r\n// Local imports\r\nimport { All, CompoundDesignator, Designator, Nothing, Unknown } from \"./modules/designator.mjs\";\r\nimport { AbstractFunction, ConstantFunction, InputArgument, ReturnValue } from \"./modules/function.mjs\";\r\nimport { ConstantDesignator, ConstantValue, NaryValue, Value } from \"./modules/value.mjs\";\r\nimport { AtomicFunction, AtomicFunctionReturnValue, Identity } from \"./modules/atomic-function.mjs\";\r\nimport { BooleanAnd, BooleanOr, BooleanNot, NaryConjunctiveVerdict, NaryDisjunctiveVerdict } from \"./modules/booleans.mjs\";\r\nimport { AndNode, Explainer, DesignatedObject, ObjectNode, OrNode, Tracer, UnknownNode } from \"./modules/tracer.mjs\";\r\nimport { Addition, Subtraction, Division, GreaterOrEqual, LesserOrEqual, GreaterThan, LesserThan, Multiplication, IsEqualTo } from \"./modules/numbers.mjs\";\r\nimport { Enumerate, EnumeratedValue, NthItem } from \"./modules/enumerate.mjs\";\r\nimport { Argument, ArgumentValue, ComposedFunction, ComposedFunctionValue, FunctionNamedArgument, NamedArgument, NamedArgumentValue } from \"./modules/composed-function.mjs\";\r\nimport { ExistentialQuantifier, Quantifier, QuantifierConjunctiveVerdict, QuantifierDisjunctiveVerdict, QuantifierVerdict, UniversalQuantifier } from \"./modules/quantifier.mjs\";\r\nimport { BackgroundColor, BackgroundImage, BorderColor, BorderRadius, BorderStyle, BorderWidth, ClientOffsetTop, ClientOffsetLeft, CssPropertyFunction, CssRecursivePropertyFunction, Color, DimensionHeight, DimensionWidth, Display, ElementAttribute, ElementAttributeValue, FindBySelector, Float, FontFamily, FontSize, FontWeight, MarginTop, MarginBottom, MarginLeft, MarginRight, Opacity, PageOffsetTop, PageOffsetLeft, Path, PathValue, PaddingTop, PaddingBottom, PaddingLeft, PaddingRight, Position, Visibility, WebElementFunction, Zindex } from \"./modules/web-element.mjs\";\r\nimport { TestCondition, TestDriver, TestResult, Verdict } from \"./modules/verdict.mjs\";\r\nimport { isHtmlElement } from \"./modules/util.mjs\";\r\nimport { Serialization } from \"./modules/serialization.mjs\";\r\n\r\n\r\n/**\r\n * Evaluates a set of conditions on a DOM tree\r\n * @param root A DOM node corresponding to the root of the page\r\n * @param conditions A list of {@link Function}, each corresponding to a\r\n * Boolean condition to evaluate on the page.\r\n * @return An array of data trees corresponding to the explanation for\r\n * each condition that evaluates to <tt>false</tt>.\r\n */\r\nfunction evaluateDom(root, conditions = []) {\r\n    var verdicts = [];\r\n    for (var i = 0; i < conditions.length; i++) {\r\n        var verdict = getVerdict(root, conditions[i]);\r\n        if (verdict != null) {\r\n            verdicts.push(verdict);\r\n        }\r\n    }\r\n    return verdicts;\r\n\r\n}\r\n\r\n/**\r\n * Evaluates a single condition on a DOM tree. <strong>This is a stub for\r\n * testing purposes.</strong>\r\n * @param root A DOM node corresponding to the root of the page\r\n * @param conditions A {@link Function} that corresponds to a\r\n * Boolean condition to evaluate on the page.\r\n * @return A data tree explaining the violation of the condition if it\r\n * evaluates to <tt>false</tt>, and <tt>null</tt> if the condition is fulfilled.\r\n */\r\nfunction getVerdict(root, condition) {\r\n    if (root === null) {\r\n        return null;\r\n    }\r\n    const returnValue = condition.evaluate(root);\r\n    if (returnValue.value === true) {\r\n        return null;\r\n    }\r\n    const verdict = new Verdict(returnValue, condition)\r\n    const witness = verdict.getWitness();\r\n    const trees = getTreeFromWitness(witness)\r\n    return trees\r\n}\r\n\r\nfunction getTreeFromWitness(witnesses = []) {\r\n    const tree = dataTree.create();\r\n    for (const designatedObject of witnesses) {\r\n        const part = [];\r\n        let subject = null;\r\n        let elementAttribute = null;\r\n        let lastPartType;\r\n        // First form\r\n        if (isHtmlElement(designatedObject.getObject())) {\r\n            const elements = designatedObject.getDesignator().elements;\r\n            subject = elements[elements.length - 2].toString() || null;\r\n            elementAttribute = elements[elements.length - 3].toString() || null;\r\n            lastPartType = \"Path\";\r\n        }\r\n        // Second form\r\n        else {\r\n            subject = designatedObject.getObject();\r\n            lastPartType = \"ConstantDesignator\";\r\n        }\r\n        // Build the leaf's \"part\"\r\n        for (const element of designatedObject.getDesignator().elements) {\r\n            if (element.constructor.name === lastPartType) {\r\n                break;\r\n            }\r\n            part.push(element.toString());\r\n        }\r\n        tree.insert({\r\n            elementAttribute,\r\n            part,\r\n            subject\r\n        });\r\n    }\r\n    return tree;\r\n}\r\n\r\n/**\r\n * Export public API\r\n */\r\nexport {\r\n    getVerdict,\r\n    evaluateDom,\r\n    getTreeFromWitness,\r\n    AbstractFunction,\r\n    Addition,\r\n    All,\r\n    AndNode,\r\n    Argument,\r\n    ArgumentValue,\r\n    AtomicFunction,\r\n    AtomicFunctionReturnValue,\r\n    BackgroundColor,\r\n    BackgroundImage,\r\n    BooleanAnd,\r\n    BooleanNot,\r\n    BooleanOr,\r\n    BorderColor,\r\n    BorderRadius,\r\n    BorderStyle,\r\n    BorderWidth,\r\n    ClientOffsetTop,\r\n    ClientOffsetLeft,\r\n    CssPropertyFunction,\r\n    CssRecursivePropertyFunction,\r\n    Color,\r\n    ComposedFunction,\r\n    ComposedFunctionValue,\r\n    CompoundDesignator,\r\n    ConstantFunction,\r\n    ConstantDesignator,\r\n    ConstantValue,\r\n    Designator,\r\n    DesignatedObject,\r\n    DimensionHeight,\r\n    DimensionWidth,\r\n    Display,\r\n    Division,\r\n    ElementAttribute,\r\n    ElementAttributeValue,\r\n    Enumerate,\r\n    EnumeratedValue,\r\n    ExistentialQuantifier,\r\n    Explainer,\r\n    FindBySelector,\r\n    Float,\r\n    FontFamily,\r\n    FontSize,\r\n    FontWeight,\r\n    FunctionNamedArgument,\r\n    GreaterOrEqual,\r\n    GreaterThan,\r\n    Identity,\r\n    InputArgument,\r\n    IsEqualTo,\r\n    LesserThan,\r\n    LesserOrEqual,\r\n    MarginTop,\r\n    MarginBottom,\r\n    MarginLeft,\r\n    MarginRight,\r\n    Multiplication,\r\n    NamedArgument,\r\n    NamedArgumentValue,\r\n    NaryConjunctiveVerdict,\r\n    NaryDisjunctiveVerdict,\r\n    NaryValue,\r\n    NthItem,\r\n    Nothing,\r\n    ObjectNode,\r\n    Opacity,\r\n    OrNode,\r\n    PageOffsetTop,\r\n    PageOffsetLeft,\r\n    Path,\r\n    PathValue,\r\n    PaddingTop,\r\n    PaddingBottom,\r\n    PaddingRight,\r\n    PaddingLeft,\r\n    Position,\r\n    Quantifier,\r\n    QuantifierConjunctiveVerdict,\r\n    QuantifierDisjunctiveVerdict,\r\n    QuantifierVerdict,\r\n    ReturnValue,\r\n    Serialization,\r\n    Subtraction,\r\n    TestCondition,\r\n    TestDriver,\r\n    TestResult,\r\n    Tracer,\r\n    UniversalQuantifier,\r\n    Unknown,\r\n    UnknownNode,\r\n    Value,\r\n    Verdict,\r\n    Visibility,\r\n    WebElementFunction,\r\n    Zindex\r\n};\r\n\r\n// :wrap=soft:tabSize=2:"],"sourceRoot":""}